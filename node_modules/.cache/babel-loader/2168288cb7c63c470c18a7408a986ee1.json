{"ast":null,"code":"/*\r\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\r\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n    is furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\r\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\n\n/*global module*/\n(function () {\n  var userContext,\n      userInstance,\n      pipe = function (param, val) {\n    param.value = val;\n  },\n      Super = Object.create(null, {\n    activate: {\n      writable: true,\n      value: function (doActivate) {\n        if (doActivate) {\n          this.input.disconnect();\n          this.input.connect(this.activateNode);\n\n          if (this.activateCallback) {\n            this.activateCallback(doActivate);\n          }\n        } else {\n          this.input.disconnect();\n          this.input.connect(this.output);\n        }\n      }\n    },\n    bypass: {\n      get: function () {\n        return this._bypass;\n      },\n      set: function (value) {\n        if (this._lastBypassValue === value) {\n          return;\n        }\n\n        this._bypass = value;\n        this.activate(!value);\n        this._lastBypassValue = value;\n      }\n    },\n    connect: {\n      value: function (target) {\n        this.output.connect(target);\n      }\n    },\n    disconnect: {\n      value: function (target) {\n        this.output.disconnect(target);\n      }\n    },\n    connectInOrder: {\n      value: function (nodeArray) {\n        var i = nodeArray.length - 1;\n\n        while (i--) {\n          if (!nodeArray[i].connect) {\n            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n          }\n\n          if (nodeArray[i + 1].input) {\n            nodeArray[i].connect(nodeArray[i + 1].input);\n          } else {\n            nodeArray[i].connect(nodeArray[i + 1]);\n          }\n        }\n      }\n    },\n    getDefaults: {\n      value: function () {\n        var result = {};\n\n        for (var key in this.defaults) {\n          result[key] = this.defaults[key].value;\n        }\n\n        return result;\n      }\n    },\n    automate: {\n      value: function (property, value, duration, startTime) {\n        var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n            dur = duration ? ~~(duration / 1000) : 0,\n            _is = this.defaults[property],\n            param = this[property],\n            method;\n\n        if (param) {\n          if (_is.automatable) {\n            if (!duration) {\n              method = \"setValueAtTime\";\n            } else {\n              method = \"linearRampToValueAtTime\";\n              param.cancelScheduledValues(start);\n              param.setValueAtTime(param.value, start);\n            }\n\n            param[method](value, dur + start);\n          } else {\n            param = value;\n          }\n        } else {\n          console.error(\"Invalid Property for \" + this.name);\n        }\n      }\n    }\n  }),\n      FLOAT = \"float\",\n      BOOLEAN = \"boolean\",\n      STRING = \"string\",\n      INT = \"int\";\n\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = Tuna;\n  } else if (typeof define === \"function\") {\n    window.define(\"Tuna\", definition);\n  } else {\n    window.Tuna = Tuna;\n  }\n\n  function definition() {\n    return Tuna;\n  }\n\n  function Tuna(context) {\n    if (!(this instanceof Tuna)) {\n      return new Tuna(context);\n    }\n\n    var _window = typeof window === \"undefined\" ? {} : window;\n\n    if (!_window.AudioContext) {\n      _window.AudioContext = _window.webkitAudioContext;\n    }\n\n    if (!context) {\n      console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n      context = _window.AudioContext && new _window.AudioContext();\n    }\n\n    if (!context) {\n      throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n    }\n\n    connectify(context);\n    userContext = context;\n    userInstance = this;\n  }\n\n  function connectify(context) {\n    if (context.__connectified__ === true) return;\n    var gain = context.createGain(),\n        proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n        oconnect = proto.connect;\n    proto.connect = shimConnect;\n    context.__connectified__ = true; // Prevent overriding connect more than once\n\n    function shimConnect() {\n      var node = arguments[0];\n      arguments[0] = Super.isPrototypeOf ? Super.isPrototypeOf(node) ? node.input : node : node.input || node;\n      oconnect.apply(this, arguments);\n      return node;\n    }\n  }\n\n  function dbToWAVolume(db) {\n    return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n  }\n\n  function fmod(x, y) {\n    // http://kevin.vanzonneveld.net\n    // *     example 1: fmod(5.7, 1.3);\n    // *     returns 1: 0.5\n    var tmp,\n        tmp2,\n        p = 0,\n        pY = 0,\n        l = 0.0,\n        l2 = 0.0;\n    tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n    p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n    tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n    pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\n    if (pY > p) {\n      p = pY;\n    }\n\n    tmp2 = x % y;\n\n    if (p < -100 || p > 20) {\n      // toFixed will give an out of bound error so we fix it like this:\n      l = Math.round(Math.log(tmp2) / Math.log(10));\n      l2 = Math.pow(10, l);\n      return (tmp2 / l2).toFixed(l - p) * l2;\n    } else {\n      return parseFloat(tmp2.toFixed(-p));\n    }\n  }\n\n  function sign(x) {\n    if (x === 0) {\n      return 1;\n    } else {\n      return Math.abs(x) / x;\n    }\n  }\n\n  function tanh(n) {\n    return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n  }\n\n  function initValue(userVal, defaultVal) {\n    return userVal === undefined ? defaultVal : userVal;\n  }\n\n  Tuna.prototype.Bitcrusher = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.processor);\n    this.processor.connect(this.output);\n    var phaser = 0,\n        last = 0,\n        input,\n        output,\n        step,\n        i,\n        length;\n\n    this.processor.onaudioprocess = function (e) {\n      input = e.inputBuffer.getChannelData(0), output = e.outputBuffer.getChannelData(0), step = Math.pow(1 / 2, this.bits);\n      length = input.length;\n\n      for (i = 0; i < length; i++) {\n        phaser += this.normfreq;\n\n        if (phaser >= 1.0) {\n          phaser -= 1.0;\n          last = step * Math.floor(input[i] / step + 0.5);\n        }\n\n        output[i] = last;\n      }\n    };\n\n    this.bits = properties.bits || this.defaults.bits.value;\n    this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n    name: {\n      value: \"Bitcrusher\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        bits: {\n          value: 4,\n          min: 1,\n          max: 16,\n          automatable: false,\n          type: INT\n        },\n        bufferSize: {\n          value: 4096,\n          min: 256,\n          max: 16384,\n          automatable: false,\n          type: INT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        },\n        normfreq: {\n          value: 0.1,\n          min: 0.0001,\n          max: 1.0,\n          automatable: false,\n          type: FLOAT\n        }\n      }\n    },\n    bits: {\n      enumerable: true,\n      get: function () {\n        return this.processor.bits;\n      },\n      set: function (value) {\n        this.processor.bits = value;\n      }\n    },\n    normfreq: {\n      enumerable: true,\n      get: function () {\n        return this.processor.normfreq;\n      },\n      set: function (value) {\n        this.processor.normfreq = value;\n      }\n    }\n  });\n\n  Tuna.prototype.Cabinet = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.convolver = this.newConvolver(properties.impulsePath || \"../impulses/impulse_guitar.wav\");\n    this.makeupNode = userContext.createGain();\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.convolver.input);\n    this.convolver.output.connect(this.makeupNode);\n    this.makeupNode.connect(this.output); //don't use makeupGain setter at init to avoid smoothing\n\n    this.makeupNode.gain.value = initValue(properties.makeupGain, this.defaults.makeupGain.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n    name: {\n      value: \"Cabinet\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        makeupGain: {\n          value: 1,\n          min: 0,\n          max: 20,\n          automatable: true,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    makeupGain: {\n      enumerable: true,\n      get: function () {\n        return this.makeupNode.gain;\n      },\n      set: function (value) {\n        this.makeupNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    newConvolver: {\n      value: function (impulsePath) {\n        return new userInstance.Convolver({\n          impulse: impulsePath,\n          dryLevel: 0,\n          wetLevel: 1\n        });\n      }\n    }\n  });\n\n  Tuna.prototype.Chorus = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.attenuator = this.activateNode = userContext.createGain();\n    this.splitter = userContext.createChannelSplitter(2);\n    this.delayL = userContext.createDelay();\n    this.delayR = userContext.createDelay();\n    this.feedbackGainNodeLR = userContext.createGain();\n    this.feedbackGainNodeRL = userContext.createGain();\n    this.merger = userContext.createChannelMerger(2);\n    this.output = userContext.createGain();\n    this.lfoL = new userInstance.LFO({\n      target: this.delayL.delayTime,\n      callback: pipe\n    });\n    this.lfoR = new userInstance.LFO({\n      target: this.delayR.delayTime,\n      callback: pipe\n    });\n    this.input.connect(this.attenuator);\n    this.attenuator.connect(this.output);\n    this.attenuator.connect(this.splitter);\n    this.splitter.connect(this.delayL, 0);\n    this.splitter.connect(this.delayR, 1);\n    this.delayL.connect(this.feedbackGainNodeLR);\n    this.delayR.connect(this.feedbackGainNodeRL);\n    this.feedbackGainNodeLR.connect(this.delayR);\n    this.feedbackGainNodeRL.connect(this.delayL);\n    this.delayL.connect(this.merger, 0, 0);\n    this.delayR.connect(this.merger, 0, 1);\n    this.merger.connect(this.output);\n    this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n    this.rate = initValue(properties.rate, this.defaults.rate.value);\n    this.delay = initValue(properties.delay, this.defaults.delay.value);\n    this.depth = initValue(properties.depth, this.defaults.depth.value);\n    this.lfoR.phase = Math.PI / 2;\n    this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n\n    this.lfoL.activate(true);\n    this.lfoR.activate(true);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Chorus.prototype = Object.create(Super, {\n    name: {\n      value: \"Chorus\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        feedback: {\n          value: 0.4,\n          min: 0,\n          max: 0.95,\n          automatable: false,\n          type: FLOAT\n        },\n        delay: {\n          value: 0.0045,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        depth: {\n          value: 0.7,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        rate: {\n          value: 1.5,\n          min: 0,\n          max: 8,\n          automatable: false,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    delay: {\n      enumerable: true,\n      get: function () {\n        return this._delay;\n      },\n      set: function (value) {\n        this._delay = 0.0002 * (Math.pow(10, value) * 2);\n        this.lfoL.offset = this._delay;\n        this.lfoR.offset = this._delay;\n        this._depth = this._depth;\n      }\n    },\n    depth: {\n      enumerable: true,\n      get: function () {\n        return this._depth;\n      },\n      set: function (value) {\n        this._depth = value;\n        this.lfoL.oscillation = this._depth * this._delay;\n        this.lfoR.oscillation = this._depth * this._delay;\n      }\n    },\n    feedback: {\n      enumerable: true,\n      get: function () {\n        return this._feedback;\n      },\n      set: function (value) {\n        this._feedback = value;\n        this.feedbackGainNodeLR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n        this.feedbackGainNodeRL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n      }\n    },\n    rate: {\n      enumerable: true,\n      get: function () {\n        return this._rate;\n      },\n      set: function (value) {\n        this._rate = value;\n        this.lfoL.frequency = this._rate;\n        this.lfoR.frequency = this._rate;\n      }\n    }\n  });\n\n  Tuna.prototype.Compressor = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n    this.makeupNode = userContext.createGain();\n    this.output = userContext.createGain();\n    this.compNode.connect(this.makeupNode);\n    this.makeupNode.connect(this.output);\n    this.automakeup = initValue(properties.automakeup, this.defaults.automakeup.value); //don't use makeupGain setter at initialization to avoid smoothing\n\n    if (this.automakeup) {\n      this.makeupNode.gain.value = dbToWAVolume(this.computeMakeup());\n    } else {\n      this.makeupNode.gain.value = dbToWAVolume(initValue(properties.makeupGain, this.defaults.makeupGain.value));\n    }\n\n    this.threshold = initValue(properties.threshold, this.defaults.threshold.value);\n    this.release = initValue(properties.release, this.defaults.release.value);\n    this.attack = initValue(properties.attack, this.defaults.attack.value);\n    this.ratio = properties.ratio || this.defaults.ratio.value;\n    this.knee = initValue(properties.knee, this.defaults.knee.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Compressor.prototype = Object.create(Super, {\n    name: {\n      value: \"Compressor\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        threshold: {\n          value: -20,\n          min: -60,\n          max: 0,\n          automatable: true,\n          type: FLOAT\n        },\n        release: {\n          value: 250,\n          min: 10,\n          max: 2000,\n          automatable: true,\n          type: FLOAT\n        },\n        makeupGain: {\n          value: 1,\n          min: 1,\n          max: 100,\n          automatable: true,\n          type: FLOAT\n        },\n        attack: {\n          value: 1,\n          min: 0,\n          max: 1000,\n          automatable: true,\n          type: FLOAT\n        },\n        ratio: {\n          value: 4,\n          min: 1,\n          max: 50,\n          automatable: true,\n          type: FLOAT\n        },\n        knee: {\n          value: 5,\n          min: 0,\n          max: 40,\n          automatable: true,\n          type: FLOAT\n        },\n        automakeup: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    computeMakeup: {\n      value: function () {\n        var magicCoefficient = 4,\n            // raise me if the output is too hot\n        c = this.compNode;\n        return -(c.threshold.value - c.threshold.value / c.ratio.value) / magicCoefficient;\n      }\n    },\n    automakeup: {\n      enumerable: true,\n      get: function () {\n        return this._automakeup;\n      },\n      set: function (value) {\n        this._automakeup = value;\n        if (this._automakeup) this.makeupGain = this.computeMakeup();\n      }\n    },\n    threshold: {\n      enumerable: true,\n      get: function () {\n        return this.compNode.threshold;\n      },\n      set: function (value) {\n        this.compNode.threshold.value = value;\n        if (this._automakeup) this.makeupGain = this.computeMakeup();\n      }\n    },\n    ratio: {\n      enumerable: true,\n      get: function () {\n        return this.compNode.ratio;\n      },\n      set: function (value) {\n        this.compNode.ratio.value = value;\n        if (this._automakeup) this.makeupGain = this.computeMakeup();\n      }\n    },\n    knee: {\n      enumerable: true,\n      get: function () {\n        return this.compNode.knee;\n      },\n      set: function (value) {\n        this.compNode.knee.value = value;\n        if (this._automakeup) this.makeupGain = this.computeMakeup();\n      }\n    },\n    attack: {\n      enumerable: true,\n      get: function () {\n        return this.compNode.attack;\n      },\n      set: function (value) {\n        this.compNode.attack.value = value / 1000;\n      }\n    },\n    release: {\n      enumerable: true,\n      get: function () {\n        return this.compNode.release;\n      },\n      set: function (value) {\n        this.compNode.release.value = value / 1000;\n      }\n    },\n    makeupGain: {\n      enumerable: true,\n      get: function () {\n        return this.makeupNode.gain;\n      },\n      set: function (value) {\n        this.makeupNode.gain.setTargetAtTime(dbToWAVolume(value), userContext.currentTime, 0.01);\n      }\n    }\n  });\n\n  Tuna.prototype.Convolver = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.convolver = userContext.createConvolver();\n    this.dry = userContext.createGain();\n    this.filterLow = userContext.createBiquadFilter();\n    this.filterHigh = userContext.createBiquadFilter();\n    this.wet = userContext.createGain();\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.filterLow);\n    this.activateNode.connect(this.dry);\n    this.filterLow.connect(this.filterHigh);\n    this.filterHigh.connect(this.convolver);\n    this.convolver.connect(this.wet);\n    this.wet.connect(this.output);\n    this.dry.connect(this.output); //don't use setters at init to avoid smoothing\n\n    this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n    this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n    this.filterHigh.frequency.value = properties.highCut || this.defaults.highCut.value;\n    this.filterLow.frequency.value = properties.lowCut || this.defaults.lowCut.value;\n    this.output.gain.value = initValue(properties.level, this.defaults.level.value);\n    this.filterHigh.type = \"lowpass\";\n    this.filterLow.type = \"highpass\";\n    this.buffer = properties.impulse || \"../impulses/ir_rev_short.wav\";\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Convolver.prototype = Object.create(Super, {\n    name: {\n      value: \"Convolver\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        highCut: {\n          value: 22050,\n          min: 20,\n          max: 22050,\n          automatable: true,\n          type: FLOAT\n        },\n        lowCut: {\n          value: 20,\n          min: 20,\n          max: 22050,\n          automatable: true,\n          type: FLOAT\n        },\n        dryLevel: {\n          value: 1,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT\n        },\n        wetLevel: {\n          value: 1,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT\n        },\n        level: {\n          value: 1,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    lowCut: {\n      get: function () {\n        return this.filterLow.frequency;\n      },\n      set: function (value) {\n        this.filterLow.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    highCut: {\n      get: function () {\n        return this.filterHigh.frequency;\n      },\n      set: function (value) {\n        this.filterHigh.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    level: {\n      get: function () {\n        return this.output.gain;\n      },\n      set: function (value) {\n        this.output.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    dryLevel: {\n      get: function () {\n        return this.dry.gain;\n      },\n      set: function (value) {\n        this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    wetLevel: {\n      get: function () {\n        return this.wet.gain;\n      },\n      set: function (value) {\n        this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    buffer: {\n      enumerable: false,\n      get: function () {\n        return this.convolver.buffer;\n      },\n      set: function (impulse) {\n        var convolver = this.convolver,\n            xhr = new XMLHttpRequest();\n\n        if (!impulse) {\n          console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n          return;\n        }\n\n        xhr.open(\"GET\", impulse, true);\n        xhr.responseType = \"arraybuffer\";\n\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n              userContext.decodeAudioData(xhr.response, function (buffer) {\n                convolver.buffer = buffer;\n              }, function (e) {\n                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n              });\n            }\n          }\n        };\n\n        xhr.send(null);\n      }\n    }\n  });\n\n  Tuna.prototype.Delay = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.dry = userContext.createGain();\n    this.wet = userContext.createGain();\n    this.filter = userContext.createBiquadFilter();\n    this.delay = userContext.createDelay(10);\n    this.feedbackNode = userContext.createGain();\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.delay);\n    this.activateNode.connect(this.dry);\n    this.delay.connect(this.filter);\n    this.filter.connect(this.feedbackNode);\n    this.feedbackNode.connect(this.delay);\n    this.feedbackNode.connect(this.wet);\n    this.wet.connect(this.output);\n    this.dry.connect(this.output);\n    this.delayTime = properties.delayTime || this.defaults.delayTime.value; //don't use setters at init to avoid smoothing\n\n    this.feedbackNode.gain.value = initValue(properties.feedback, this.defaults.feedback.value);\n    this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n    this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n    this.filter.frequency.value = properties.cutoff || this.defaults.cutoff.value;\n    this.filter.type = \"lowpass\";\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Delay.prototype = Object.create(Super, {\n    name: {\n      value: \"Delay\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        delayTime: {\n          value: 100,\n          min: 20,\n          max: 1000,\n          automatable: false,\n          type: FLOAT\n        },\n        feedback: {\n          value: 0.45,\n          min: 0,\n          max: 0.9,\n          automatable: true,\n          type: FLOAT\n        },\n        cutoff: {\n          value: 20000,\n          min: 20,\n          max: 20000,\n          automatable: true,\n          type: FLOAT\n        },\n        wetLevel: {\n          value: 0.5,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT\n        },\n        dryLevel: {\n          value: 1,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    delayTime: {\n      enumerable: true,\n      get: function () {\n        return this.delay.delayTime;\n      },\n      set: function (value) {\n        this.delay.delayTime.value = value / 1000;\n      }\n    },\n    wetLevel: {\n      enumerable: true,\n      get: function () {\n        return this.wet.gain;\n      },\n      set: function (value) {\n        this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    dryLevel: {\n      enumerable: true,\n      get: function () {\n        return this.dry.gain;\n      },\n      set: function (value) {\n        this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    feedback: {\n      enumerable: true,\n      get: function () {\n        return this.feedbackNode.gain;\n      },\n      set: function (value) {\n        this.feedbackNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    cutoff: {\n      enumerable: true,\n      get: function () {\n        return this.filter.frequency;\n      },\n      set: function (value) {\n        this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    }\n  });\n\n  Tuna.prototype.Filter = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.filter = userContext.createBiquadFilter();\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.filter);\n    this.filter.connect(this.output); //don't use setters for freq and gain at init to avoid smoothing\n\n    this.filter.frequency.value = properties.frequency || this.defaults.frequency.value;\n    this.Q = properties.resonance || this.defaults.Q.value;\n    this.filterType = initValue(properties.filterType, this.defaults.filterType.value);\n    this.filter.gain.value = initValue(properties.gain, this.defaults.gain.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Filter.prototype = Object.create(Super, {\n    name: {\n      value: \"Filter\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        frequency: {\n          value: 800,\n          min: 20,\n          max: 22050,\n          automatable: true,\n          type: FLOAT\n        },\n        Q: {\n          value: 1,\n          min: 0.001,\n          max: 100,\n          automatable: true,\n          type: FLOAT\n        },\n        gain: {\n          value: 0,\n          min: -40,\n          max: 40,\n          automatable: true,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        },\n        filterType: {\n          value: \"lowpass\",\n          automatable: false,\n          type: STRING\n        }\n      }\n    },\n    filterType: {\n      enumerable: true,\n      get: function () {\n        return this.filter.type;\n      },\n      set: function (value) {\n        this.filter.type = value;\n      }\n    },\n    Q: {\n      enumerable: true,\n      get: function () {\n        return this.filter.Q;\n      },\n      set: function (value) {\n        this.filter.Q.value = value;\n      }\n    },\n    gain: {\n      enumerable: true,\n      get: function () {\n        return this.filter.gain;\n      },\n      set: function (value) {\n        this.filter.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    frequency: {\n      enumerable: true,\n      get: function () {\n        return this.filter.frequency;\n      },\n      set: function (value) {\n        this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    }\n  });\n\n  Tuna.prototype.Gain = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.gainNode = userContext.createGain();\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.gainNode);\n    this.gainNode.connect(this.output); //don't use setter at init to avoid smoothing\n\n    this.gainNode.gain.value = initValue(properties.gain, this.defaults.gain.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Gain.prototype = Object.create(Super, {\n    name: {\n      value: \"Gain\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        },\n        gain: {\n          value: 1.0,\n          automatable: true,\n          type: FLOAT\n        }\n      }\n    },\n    gain: {\n      enumerable: true,\n      get: function () {\n        return this.gainNode.gain;\n      },\n      set: function (value) {\n        this.gainNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    }\n  });\n\n  Tuna.prototype.MoogFilter = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.processor);\n    this.processor.connect(this.output);\n    var in1, in2, in3, in4, out1, out2, out3, out4;\n    in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n    var input, output, f, fb, i, length, inputFactor;\n\n    this.processor.onaudioprocess = function (e) {\n      input = e.inputBuffer.getChannelData(0);\n      output = e.outputBuffer.getChannelData(0);\n      f = this.cutoff * 1.16;\n      inputFactor = 0.35013 * (f * f) * (f * f);\n      fb = this.resonance * (1.0 - 0.15 * f * f);\n      length = input.length;\n\n      for (i = 0; i < length; i++) {\n        input[i] -= out4 * fb;\n        input[i] *= inputFactor;\n        out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n\n        in1 = input[i];\n        out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n\n        in2 = out1;\n        out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n\n        in3 = out2;\n        out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n\n        in4 = out3;\n        output[i] = out4;\n      }\n    };\n\n    this.cutoff = initValue(properties.cutoff, this.defaults.cutoff.value);\n    this.resonance = initValue(properties.resonance, this.defaults.resonance.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n    name: {\n      value: \"MoogFilter\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        bufferSize: {\n          value: 4096,\n          min: 256,\n          max: 16384,\n          automatable: false,\n          type: INT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        },\n        cutoff: {\n          value: 0.065,\n          min: 0.0001,\n          max: 1.0,\n          automatable: false,\n          type: FLOAT\n        },\n        resonance: {\n          value: 3.5,\n          min: 0.0,\n          max: 4.0,\n          automatable: false,\n          type: FLOAT\n        }\n      }\n    },\n    cutoff: {\n      enumerable: true,\n      get: function () {\n        return this.processor.cutoff;\n      },\n      set: function (value) {\n        this.processor.cutoff = value;\n      }\n    },\n    resonance: {\n      enumerable: true,\n      get: function () {\n        return this.processor.resonance;\n      },\n      set: function (value) {\n        this.processor.resonance = value;\n      }\n    }\n  });\n\n  Tuna.prototype.Overdrive = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.inputDrive = userContext.createGain();\n    this.waveshaper = userContext.createWaveShaper();\n    this.outputDrive = userContext.createGain();\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.inputDrive);\n    this.inputDrive.connect(this.waveshaper);\n    this.waveshaper.connect(this.outputDrive);\n    this.outputDrive.connect(this.output);\n    this.ws_table = new Float32Array(this.k_nSamples);\n    this.drive = initValue(properties.drive, this.defaults.drive.value);\n    this.outputGain = initValue(properties.outputGain, this.defaults.outputGain.value);\n    this.curveAmount = initValue(properties.curveAmount, this.defaults.curveAmount.value);\n    this.algorithmIndex = initValue(properties.algorithmIndex, this.defaults.algorithmIndex.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n    name: {\n      value: \"Overdrive\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        drive: {\n          value: 1,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT,\n          scaled: true\n        },\n        outputGain: {\n          value: 0,\n          min: -46,\n          max: 0,\n          automatable: true,\n          type: FLOAT,\n          scaled: true\n        },\n        curveAmount: {\n          value: 0.725,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        algorithmIndex: {\n          value: 0,\n          min: 0,\n          max: 5,\n          automatable: false,\n          type: INT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    k_nSamples: {\n      value: 8192\n    },\n    drive: {\n      get: function () {\n        return this.inputDrive.gain;\n      },\n      set: function (value) {\n        this._drive = value;\n      }\n    },\n    curveAmount: {\n      get: function () {\n        return this._curveAmount;\n      },\n      set: function (value) {\n        this._curveAmount = value;\n\n        if (this._algorithmIndex === undefined) {\n          this._algorithmIndex = 0;\n        }\n\n        this.waveshaperAlgorithms[this._algorithmIndex](this._curveAmount, this.k_nSamples, this.ws_table);\n\n        this.waveshaper.curve = this.ws_table;\n      }\n    },\n    outputGain: {\n      get: function () {\n        return this.outputDrive.gain;\n      },\n      set: function (value) {\n        this._outputGain = dbToWAVolume(value);\n        this.outputDrive.gain.setValueAtTime(this._outputGain, userContext.currentTime, 0.01);\n      }\n    },\n    algorithmIndex: {\n      get: function () {\n        return this._algorithmIndex;\n      },\n      set: function (value) {\n        this._algorithmIndex = value;\n        this.curveAmount = this._curveAmount;\n      }\n    },\n    waveshaperAlgorithms: {\n      value: [function (amount, n_samples, ws_table) {\n        amount = Math.min(amount, 0.9999);\n        var k = 2 * amount / (1 - amount),\n            i,\n            x;\n\n        for (i = 0; i < n_samples; i++) {\n          x = i * 2 / n_samples - 1;\n          ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n        }\n      }, function (amount, n_samples, ws_table) {\n        var i, x, y;\n\n        for (i = 0; i < n_samples; i++) {\n          x = i * 2 / n_samples - 1;\n          y = (0.5 * Math.pow(x + 1.4, 2) - 1) * y >= 0 ? 5.8 : 1.2;\n          ws_table[i] = tanh(y);\n        }\n      }, function (amount, n_samples, ws_table) {\n        var i,\n            x,\n            y,\n            a = 1 - amount;\n\n        for (i = 0; i < n_samples; i++) {\n          x = i * 2 / n_samples - 1;\n          y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n          ws_table[i] = tanh(y * 2);\n        }\n      }, function (amount, n_samples, ws_table) {\n        var i,\n            x,\n            y,\n            abx,\n            a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n\n        for (i = 0; i < n_samples; i++) {\n          x = i * 2 / n_samples - 1;\n          abx = Math.abs(x);\n          if (abx < a) y = abx;else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));else if (abx > 1) y = abx;\n          ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n        }\n      }, function (amount, n_samples, ws_table) {\n        // fixed curve, amount doesn't do anything, the distortion is just from the drive\n        var i, x;\n\n        for (i = 0; i < n_samples; i++) {\n          x = i * 2 / n_samples - 1;\n\n          if (x < -0.08905) {\n            ws_table[i] = -3 / 4 * (1 - Math.pow(1 - (Math.abs(x) - 0.032857), 12) + 1 / 3 * (Math.abs(x) - 0.032847)) + 0.01;\n          } else if (x >= -0.08905 && x < 0.320018) {\n            ws_table[i] = -6.153 * (x * x) + 3.9375 * x;\n          } else {\n            ws_table[i] = 0.630035;\n          }\n        }\n      }, function (amount, n_samples, ws_table) {\n        var a = 2 + Math.round(amount * 14),\n            // we go from 2 to 16 bits, keep in mind for the UI\n        bits = Math.round(Math.pow(2, a - 1)),\n            // real number of quantization steps divided by 2\n        i,\n            x;\n\n        for (i = 0; i < n_samples; i++) {\n          x = i * 2 / n_samples - 1;\n          ws_table[i] = Math.round(x * bits) / bits;\n        }\n      }]\n    }\n  });\n\n  Tuna.prototype.Panner = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.panner = userContext.createStereoPanner();\n    this.output = userContext.createGain();\n    this.activateNode.connect(this.panner);\n    this.panner.connect(this.output);\n    this.pan = initValue(properties.pan, this.defaults.pan.value);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Panner.prototype = Object.create(Super, {\n    name: {\n      value: \"Panner\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        },\n        pan: {\n          value: 0.0,\n          min: -1.0,\n          max: 1.0,\n          automatable: true,\n          type: FLOAT\n        }\n      }\n    },\n    pan: {\n      enumerable: true,\n      get: function () {\n        return this.panner.pan;\n      },\n      set: function (value) {\n        this.panner.pan.value = value;\n      }\n    }\n  });\n\n  Tuna.prototype.Phaser = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n    this.filtersL = [];\n    this.filtersR = [];\n    this.feedbackGainNodeL = userContext.createGain();\n    this.feedbackGainNodeR = userContext.createGain();\n    this.merger = userContext.createChannelMerger(2);\n    this.filteredSignal = userContext.createGain();\n    this.output = userContext.createGain();\n    this.lfoL = new userInstance.LFO({\n      target: this.filtersL,\n      callback: this.callback\n    });\n    this.lfoR = new userInstance.LFO({\n      target: this.filtersR,\n      callback: this.callback\n    });\n    var i = this.stage;\n\n    while (i--) {\n      this.filtersL[i] = userContext.createBiquadFilter();\n      this.filtersR[i] = userContext.createBiquadFilter();\n      this.filtersL[i].type = \"allpass\";\n      this.filtersR[i].type = \"allpass\";\n    }\n\n    this.input.connect(this.splitter);\n    this.input.connect(this.output);\n    this.splitter.connect(this.filtersL[0], 0, 0);\n    this.splitter.connect(this.filtersR[0], 1, 0);\n    this.connectInOrder(this.filtersL);\n    this.connectInOrder(this.filtersR);\n    this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n    this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n    this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n    this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n    this.feedbackGainNodeL.connect(this.filtersL[0]);\n    this.feedbackGainNodeR.connect(this.filtersR[0]);\n    this.merger.connect(this.output);\n    this.rate = initValue(properties.rate, this.defaults.rate.value);\n    this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n    this.depth = initValue(properties.depth, this.defaults.depth.value);\n    this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n    this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n    this.lfoL.activate(true);\n    this.lfoR.activate(true);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Phaser.prototype = Object.create(Super, {\n    name: {\n      value: \"Phaser\"\n    },\n    stage: {\n      value: 4\n    },\n    defaults: {\n      writable: true,\n      value: {\n        rate: {\n          value: 0.1,\n          min: 0,\n          max: 8,\n          automatable: false,\n          type: FLOAT\n        },\n        depth: {\n          value: 0.6,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        feedback: {\n          value: 0.7,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        stereoPhase: {\n          value: 40,\n          min: 0,\n          max: 180,\n          automatable: false,\n          type: FLOAT\n        },\n        baseModulationFrequency: {\n          value: 700,\n          min: 500,\n          max: 1500,\n          automatable: false,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    callback: {\n      value: function (filters, value) {\n        for (var stage = 0; stage < 4; stage++) {\n          filters[stage].frequency.value = value;\n        }\n      }\n    },\n    depth: {\n      get: function () {\n        return this._depth;\n      },\n      set: function (value) {\n        this._depth = value;\n        this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n        this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n      }\n    },\n    rate: {\n      get: function () {\n        return this._rate;\n      },\n      set: function (value) {\n        this._rate = value;\n        this.lfoL.frequency = this._rate;\n        this.lfoR.frequency = this._rate;\n      }\n    },\n    baseModulationFrequency: {\n      enumerable: true,\n      get: function () {\n        return this._baseModulationFrequency;\n      },\n      set: function (value) {\n        this._baseModulationFrequency = value;\n        this.lfoL.offset = this._baseModulationFrequency;\n        this.lfoR.offset = this._baseModulationFrequency;\n        this.depth = this._depth;\n      }\n    },\n    feedback: {\n      get: function () {\n        return this._feedback;\n      },\n      set: function (value) {\n        this._feedback = value;\n        this.feedbackGainNodeL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n        this.feedbackGainNodeR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\n      }\n    },\n    stereoPhase: {\n      get: function () {\n        return this._stereoPhase;\n      },\n      set: function (value) {\n        this._stereoPhase = value;\n        var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\n        newPhase = fmod(newPhase, 2 * Math.PI);\n        this.lfoR._phase = newPhase;\n      }\n    }\n  });\n\n  Tuna.prototype.PingPongDelay = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.wet = userContext.createGain();\n    this.stereoToMonoMix = userContext.createGain();\n    this.feedbackLevel = userContext.createGain();\n    this.output = userContext.createGain();\n    this.delayLeft = userContext.createDelay(10);\n    this.delayRight = userContext.createDelay(10);\n    this.activateNode = userContext.createGain();\n    this.splitter = userContext.createChannelSplitter(2);\n    this.merger = userContext.createChannelMerger(2);\n    this.activateNode.connect(this.splitter);\n    this.splitter.connect(this.stereoToMonoMix, 0, 0);\n    this.splitter.connect(this.stereoToMonoMix, 1, 0);\n    this.stereoToMonoMix.gain.value = .5;\n    this.stereoToMonoMix.connect(this.wet);\n    this.wet.connect(this.delayLeft);\n    this.feedbackLevel.connect(this.wet);\n    this.delayLeft.connect(this.delayRight);\n    this.delayRight.connect(this.feedbackLevel);\n    this.delayLeft.connect(this.merger, 0, 0);\n    this.delayRight.connect(this.merger, 0, 1);\n    this.merger.connect(this.output);\n    this.activateNode.connect(this.output);\n    this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n    this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n    this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n    this.wet.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n    name: {\n      value: \"PingPongDelay\"\n    },\n    delayTimeLeft: {\n      enumerable: true,\n      get: function () {\n        return this._delayTimeLeft;\n      },\n      set: function (value) {\n        this._delayTimeLeft = value;\n        this.delayLeft.delayTime.value = value / 1000;\n      }\n    },\n    delayTimeRight: {\n      enumerable: true,\n      get: function () {\n        return this._delayTimeRight;\n      },\n      set: function (value) {\n        this._delayTimeRight = value;\n        this.delayRight.delayTime.value = value / 1000;\n      }\n    },\n    wetLevel: {\n      enumerable: true,\n      get: function () {\n        return this.wet.gain;\n      },\n      set: function (value) {\n        this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    feedback: {\n      enumerable: true,\n      get: function () {\n        return this.feedbackLevel.gain;\n      },\n      set: function (value) {\n        this.feedbackLevel.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\n      }\n    },\n    defaults: {\n      writable: true,\n      value: {\n        delayTimeLeft: {\n          value: 200,\n          min: 1,\n          max: 10000,\n          automatable: false,\n          type: INT\n        },\n        delayTimeRight: {\n          value: 400,\n          min: 1,\n          max: 10000,\n          automatable: false,\n          type: INT\n        },\n        feedback: {\n          value: 0.3,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT\n        },\n        wetLevel: {\n          value: 0.5,\n          min: 0,\n          max: 1,\n          automatable: true,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    }\n  });\n\n  Tuna.prototype.Tremolo = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n    this.amplitudeL = userContext.createGain();\n    this.amplitudeR = userContext.createGain();\n    this.merger = userContext.createChannelMerger(2);\n    this.output = userContext.createGain();\n    this.lfoL = new userInstance.LFO({\n      target: this.amplitudeL.gain,\n      callback: pipe\n    });\n    this.lfoR = new userInstance.LFO({\n      target: this.amplitudeR.gain,\n      callback: pipe\n    });\n    this.input.connect(this.splitter);\n    this.splitter.connect(this.amplitudeL, 0);\n    this.splitter.connect(this.amplitudeR, 1);\n    this.amplitudeL.connect(this.merger, 0, 0);\n    this.amplitudeR.connect(this.merger, 0, 1);\n    this.merger.connect(this.output);\n    this.rate = properties.rate || this.defaults.rate.value;\n    this.intensity = initValue(properties.intensity, this.defaults.intensity.value);\n    this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n    this.lfoL.offset = 1 - this.intensity / 2;\n    this.lfoR.offset = 1 - this.intensity / 2;\n    this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n    this.lfoL.activate(true);\n    this.lfoR.activate(true);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n    name: {\n      value: \"Tremolo\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        intensity: {\n          value: 0.3,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        stereoPhase: {\n          value: 0,\n          min: 0,\n          max: 180,\n          automatable: false,\n          type: FLOAT\n        },\n        rate: {\n          value: 5,\n          min: 0.1,\n          max: 11,\n          automatable: false,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    intensity: {\n      enumerable: true,\n      get: function () {\n        return this._intensity;\n      },\n      set: function (value) {\n        this._intensity = value;\n        this.lfoL.offset = 1 - this._intensity / 2;\n        this.lfoR.offset = 1 - this._intensity / 2;\n        this.lfoL.oscillation = this._intensity;\n        this.lfoR.oscillation = this._intensity;\n      }\n    },\n    rate: {\n      enumerable: true,\n      get: function () {\n        return this._rate;\n      },\n      set: function (value) {\n        this._rate = value;\n        this.lfoL.frequency = this._rate;\n        this.lfoR.frequency = this._rate;\n      }\n    },\n    stereoPhase: {\n      enumerable: true,\n      get: function () {\n        return this._stereoPhase;\n      },\n      set: function (value) {\n        this._stereoPhase = value;\n        var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\n        newPhase = fmod(newPhase, 2 * Math.PI);\n        this.lfoR.phase = newPhase;\n      }\n    }\n  });\n\n  Tuna.prototype.WahWah = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.activateNode = userContext.createGain();\n    this.envelopeFollower = new userInstance.EnvelopeFollower({\n      target: this,\n      callback: function (context, value) {\n        context.sweep = value;\n      }\n    });\n    this.filterBp = userContext.createBiquadFilter();\n    this.filterPeaking = userContext.createBiquadFilter();\n    this.output = userContext.createGain(); //Connect AudioNodes\n\n    this.activateNode.connect(this.filterBp);\n    this.filterBp.connect(this.filterPeaking);\n    this.filterPeaking.connect(this.output); //Set Properties\n\n    this.init();\n    this.automode = initValue(properties.automode, this.defaults.automode.value);\n    this.resonance = properties.resonance || this.defaults.resonance.value;\n    this.sensitivity = initValue(properties.sensitivity, this.defaults.sensitivity.value);\n    this.baseFrequency = initValue(properties.baseFrequency, this.defaults.baseFrequency.value);\n    this.excursionOctaves = properties.excursionOctaves || this.defaults.excursionOctaves.value;\n    this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n    this.activateNode.gain.value = 2;\n    this.envelopeFollower.activate(true);\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.WahWah.prototype = Object.create(Super, {\n    name: {\n      value: \"WahWah\"\n    },\n    defaults: {\n      writable: true,\n      value: {\n        automode: {\n          value: true,\n          automatable: false,\n          type: BOOLEAN\n        },\n        baseFrequency: {\n          value: 0.5,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        excursionOctaves: {\n          value: 2,\n          min: 1,\n          max: 6,\n          automatable: false,\n          type: FLOAT\n        },\n        sweep: {\n          value: 0.2,\n          min: 0,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        resonance: {\n          value: 10,\n          min: 1,\n          max: 100,\n          automatable: false,\n          type: FLOAT\n        },\n        sensitivity: {\n          value: 0.5,\n          min: -1,\n          max: 1,\n          automatable: false,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    automode: {\n      get: function () {\n        return this._automode;\n      },\n      set: function (value) {\n        this._automode = value;\n\n        if (value) {\n          this.activateNode.connect(this.envelopeFollower.input);\n          this.envelopeFollower.activate(true);\n        } else {\n          this.envelopeFollower.activate(false);\n          this.activateNode.disconnect();\n          this.activateNode.connect(this.filterBp);\n        }\n      }\n    },\n    filterFreqTimeout: {\n      value: 0\n    },\n    setFilterFreq: {\n      value: function () {\n        try {\n          this.filterBp.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\n          this.filterPeaking.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\n        } catch (e) {\n          clearTimeout(this.filterFreqTimeout); //put on the next cycle to let all init properties be set\n\n          this.filterFreqTimeout = setTimeout(function () {\n            this.setFilterFreq();\n          }.bind(this), 0);\n        }\n      }\n    },\n    sweep: {\n      enumerable: true,\n      get: function () {\n        return this._sweep;\n      },\n      set: function (value) {\n        this._sweep = Math.pow(value > 1 ? 1 : value < 0 ? 0 : value, this._sensitivity);\n        this.setFilterFreq();\n      }\n    },\n    baseFrequency: {\n      enumerable: true,\n      get: function () {\n        return this._baseFrequency;\n      },\n      set: function (value) {\n        this._baseFrequency = 50 * Math.pow(10, value * 2);\n        this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\n        this.setFilterFreq();\n      }\n    },\n    excursionOctaves: {\n      enumerable: true,\n      get: function () {\n        return this._excursionOctaves;\n      },\n      set: function (value) {\n        this._excursionOctaves = value;\n        this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\n        this.setFilterFreq();\n      }\n    },\n    sensitivity: {\n      enumerable: true,\n      get: function () {\n        return this._sensitivity;\n      },\n      set: function (value) {\n        this._sensitivity = Math.pow(10, value);\n      }\n    },\n    resonance: {\n      enumerable: true,\n      get: function () {\n        return this._resonance;\n      },\n      set: function (value) {\n        this._resonance = value;\n        this.filterPeaking.Q = this._resonance;\n      }\n    },\n    init: {\n      value: function () {\n        this.output.gain.value = 1;\n        this.filterPeaking.type = \"peaking\";\n        this.filterBp.type = \"bandpass\";\n        this.filterPeaking.frequency.value = 100;\n        this.filterPeaking.gain.value = 20;\n        this.filterPeaking.Q.value = 5;\n        this.filterBp.frequency.value = 100;\n        this.filterBp.Q.value = 1;\n      }\n    }\n  });\n\n  Tuna.prototype.EnvelopeFollower = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    }\n\n    this.input = userContext.createGain();\n    this.jsNode = this.output = userContext.createScriptProcessor(this.buffersize, 1, 1);\n    this.input.connect(this.output);\n    this.attackTime = initValue(properties.attackTime, this.defaults.attackTime.value);\n    this.releaseTime = initValue(properties.releaseTime, this.defaults.releaseTime.value);\n    this._envelope = 0;\n    this.target = properties.target || {};\n\n    this.callback = properties.callback || function () {};\n\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n    name: {\n      value: \"EnvelopeFollower\"\n    },\n    defaults: {\n      value: {\n        attackTime: {\n          value: 0.003,\n          min: 0,\n          max: 0.5,\n          automatable: false,\n          type: FLOAT\n        },\n        releaseTime: {\n          value: 0.5,\n          min: 0,\n          max: 0.5,\n          automatable: false,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    buffersize: {\n      value: 256\n    },\n    envelope: {\n      value: 0\n    },\n    sampleRate: {\n      value: 44100\n    },\n    attackTime: {\n      enumerable: true,\n      get: function () {\n        return this._attackTime;\n      },\n      set: function (value) {\n        this._attackTime = value;\n        this._attackC = Math.exp(-1 / this._attackTime * this.sampleRate / this.buffersize);\n      }\n    },\n    releaseTime: {\n      enumerable: true,\n      get: function () {\n        return this._releaseTime;\n      },\n      set: function (value) {\n        this._releaseTime = value;\n        this._releaseC = Math.exp(-1 / this._releaseTime * this.sampleRate / this.buffersize);\n      }\n    },\n    callback: {\n      get: function () {\n        return this._callback;\n      },\n      set: function (value) {\n        if (typeof value === \"function\") {\n          this._callback = value;\n        } else {\n          console.error(\"tuna.js: \" + this.name + \": Callback must be a function!\");\n        }\n      }\n    },\n    target: {\n      get: function () {\n        return this._target;\n      },\n      set: function (value) {\n        this._target = value;\n      }\n    },\n    activate: {\n      value: function (doActivate) {\n        this.activated = doActivate;\n\n        if (doActivate) {\n          this.jsNode.connect(userContext.destination);\n          this.jsNode.onaudioprocess = this.returnCompute(this);\n        } else {\n          this.jsNode.disconnect();\n          this.jsNode.onaudioprocess = null;\n        }\n\n        if (this.activateCallback) {\n          this.activateCallback(doActivate);\n        }\n      }\n    },\n    returnCompute: {\n      value: function (instance) {\n        return function (event) {\n          instance.compute(event);\n        };\n      }\n    },\n    compute: {\n      value: function (event) {\n        var count = event.inputBuffer.getChannelData(0).length,\n            channels = event.inputBuffer.numberOfChannels,\n            current,\n            chan,\n            rms,\n            i;\n        chan = rms = i = 0;\n\n        if (channels > 1) {\n          //need to mixdown\n          for (i = 0; i < count; ++i) {\n            for (; chan < channels; ++chan) {\n              current = event.inputBuffer.getChannelData(chan)[i];\n              rms += current * current / channels;\n            }\n          }\n        } else {\n          for (i = 0; i < count; ++i) {\n            current = event.inputBuffer.getChannelData(0)[i];\n            rms += current * current;\n          }\n        }\n\n        rms = Math.sqrt(rms);\n\n        if (this._envelope < rms) {\n          this._envelope *= this._attackC;\n          this._envelope += (1 - this._attackC) * rms;\n        } else {\n          this._envelope *= this._releaseC;\n          this._envelope += (1 - this._releaseC) * rms;\n        }\n\n        this._callback(this._target, this._envelope);\n      }\n    }\n  });\n\n  Tuna.prototype.LFO = function (properties) {\n    if (!properties) {\n      properties = this.getDefaults();\n    } //Instantiate AudioNode\n\n\n    this.input = userContext.createGain();\n    this.output = userContext.createScriptProcessor(256, 1, 1);\n    this.activateNode = userContext.destination; //Set Properties\n\n    this.frequency = initValue(properties.frequency, this.defaults.frequency.value);\n    this.offset = initValue(properties.offset, this.defaults.offset.value);\n    this.oscillation = initValue(properties.oscillation, this.defaults.oscillation.value);\n    this.phase = initValue(properties.phase, this.defaults.phase.value);\n    this.target = properties.target || {};\n    this.output.onaudioprocess = this.callback(properties.callback || function () {});\n    this.bypass = properties.bypass || this.defaults.bypass.value;\n  };\n\n  Tuna.prototype.LFO.prototype = Object.create(Super, {\n    name: {\n      value: \"LFO\"\n    },\n    bufferSize: {\n      value: 256\n    },\n    sampleRate: {\n      value: 44100\n    },\n    defaults: {\n      value: {\n        frequency: {\n          value: 1,\n          min: 0,\n          max: 20,\n          automatable: false,\n          type: FLOAT\n        },\n        offset: {\n          value: 0.85,\n          min: 0,\n          max: 22049,\n          automatable: false,\n          type: FLOAT\n        },\n        oscillation: {\n          value: 0.3,\n          min: -22050,\n          max: 22050,\n          automatable: false,\n          type: FLOAT\n        },\n        phase: {\n          value: 0,\n          min: 0,\n          max: 2 * Math.PI,\n          automatable: false,\n          type: FLOAT\n        },\n        bypass: {\n          value: false,\n          automatable: false,\n          type: BOOLEAN\n        }\n      }\n    },\n    frequency: {\n      get: function () {\n        return this._frequency;\n      },\n      set: function (value) {\n        this._frequency = value;\n        this._phaseInc = 2 * Math.PI * this._frequency * this.bufferSize / this.sampleRate;\n      }\n    },\n    offset: {\n      get: function () {\n        return this._offset;\n      },\n      set: function (value) {\n        this._offset = value;\n      }\n    },\n    oscillation: {\n      get: function () {\n        return this._oscillation;\n      },\n      set: function (value) {\n        this._oscillation = value;\n      }\n    },\n    phase: {\n      get: function () {\n        return this._phase;\n      },\n      set: function (value) {\n        this._phase = value;\n      }\n    },\n    target: {\n      get: function () {\n        return this._target;\n      },\n      set: function (value) {\n        this._target = value;\n      }\n    },\n    activate: {\n      value: function (doActivate) {\n        if (doActivate) {\n          this.output.connect(userContext.destination);\n\n          if (this.activateCallback) {\n            this.activateCallback(doActivate);\n          }\n        } else {\n          this.output.disconnect();\n        }\n      }\n    },\n    callback: {\n      value: function (callback) {\n        var that = this;\n        return function () {\n          that._phase += that._phaseInc;\n\n          if (that._phase > 2 * Math.PI) {\n            that._phase = 0;\n          }\n\n          callback(that._target, that._offset + that._oscillation * Math.sin(that._phase));\n        };\n      }\n    }\n  });\n\n  Tuna.toString = Tuna.prototype.toString = function () {\n    return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n  };\n})();","map":{"version":3,"sources":["/Users/Nanis/Flatiron/code/mod5/synth-builder/synth-builder/node_modules/tunajs/tuna.js"],"names":["userContext","userInstance","pipe","param","val","value","Super","Object","create","activate","writable","doActivate","input","disconnect","connect","activateNode","activateCallback","output","bypass","get","_bypass","set","_lastBypassValue","target","connectInOrder","nodeArray","i","length","console","error","getDefaults","result","key","defaults","automate","property","duration","startTime","start","currentTime","dur","_is","method","automatable","cancelScheduledValues","setValueAtTime","name","FLOAT","BOOLEAN","STRING","INT","module","exports","Tuna","define","window","definition","context","_window","AudioContext","webkitAudioContext","log","Error","connectify","__connectified__","gain","createGain","proto","getPrototypeOf","oconnect","shimConnect","node","arguments","isPrototypeOf","apply","dbToWAVolume","db","Math","max","round","pow","fmod","x","y","tmp","tmp2","p","pY","l","l2","toExponential","match","parseInt","toFixed","parseFloat","sign","abs","tanh","n","exp","initValue","userVal","defaultVal","undefined","prototype","Bitcrusher","properties","bufferSize","processor","createScriptProcessor","phaser","last","step","onaudioprocess","e","inputBuffer","getChannelData","outputBuffer","bits","normfreq","floor","min","type","enumerable","Cabinet","convolver","newConvolver","impulsePath","makeupNode","makeupGain","setTargetAtTime","Convolver","impulse","dryLevel","wetLevel","Chorus","attenuator","splitter","createChannelSplitter","delayL","createDelay","delayR","feedbackGainNodeLR","feedbackGainNodeRL","merger","createChannelMerger","lfoL","LFO","delayTime","callback","lfoR","feedback","rate","delay","depth","phase","PI","_delay","offset","_depth","oscillation","_feedback","_rate","frequency","Compressor","compNode","createDynamicsCompressor","automakeup","computeMakeup","threshold","release","attack","ratio","knee","magicCoefficient","c","_automakeup","createConvolver","dry","filterLow","createBiquadFilter","filterHigh","wet","highCut","lowCut","level","buffer","xhr","XMLHttpRequest","open","responseType","onreadystatechange","readyState","status","decodeAudioData","response","send","Delay","filter","feedbackNode","cutoff","Filter","Q","resonance","filterType","Gain","gainNode","MoogFilter","in1","in2","in3","in4","out1","out2","out3","out4","f","fb","inputFactor","Overdrive","inputDrive","waveshaper","createWaveShaper","outputDrive","ws_table","Float32Array","k_nSamples","drive","outputGain","curveAmount","algorithmIndex","scaled","_drive","_curveAmount","_algorithmIndex","waveshaperAlgorithms","curve","_outputGain","amount","n_samples","k","a","abx","Panner","panner","createStereoPanner","pan","Phaser","filtersL","filtersR","feedbackGainNodeL","feedbackGainNodeR","filteredSignal","stage","baseModulationFrequency","stereoPhase","filters","_baseModulationFrequency","_stereoPhase","newPhase","_phase","PingPongDelay","stereoToMonoMix","feedbackLevel","delayLeft","delayRight","delayTimeLeft","delayTimeRight","_delayTimeLeft","_delayTimeRight","Tremolo","amplitudeL","amplitudeR","intensity","_intensity","WahWah","envelopeFollower","EnvelopeFollower","sweep","filterBp","filterPeaking","init","automode","sensitivity","baseFrequency","excursionOctaves","_automode","filterFreqTimeout","setFilterFreq","_baseFrequency","_excursionFrequency","_sweep","clearTimeout","setTimeout","bind","_sensitivity","sampleRate","_excursionOctaves","_resonance","jsNode","buffersize","attackTime","releaseTime","_envelope","envelope","_attackTime","_attackC","_releaseTime","_releaseC","_callback","_target","activated","destination","returnCompute","instance","event","compute","count","channels","numberOfChannels","current","chan","rms","sqrt","_frequency","_phaseInc","_offset","_oscillation","that","sin","toString"],"mappings":"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","sourcesContent":["/*\r\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\r\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n    is furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\r\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n/*global module*/\r\n(function() {\r\n\r\n    var userContext,\r\n        userInstance,\r\n        pipe = function(param, val) {\r\n            param.value = val;\r\n        },\r\n        Super = Object.create(null, {\r\n            activate: {\r\n                writable: true,\r\n                value: function(doActivate) {\r\n                    if (doActivate) {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.activateNode);\r\n                        if (this.activateCallback) {\r\n                            this.activateCallback(doActivate);\r\n                        }\r\n                    } else {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.output);\r\n                    }\r\n                }\r\n            },\r\n            bypass: {\r\n                get: function() {\r\n                    return this._bypass;\r\n                },\r\n                set: function(value) {\r\n                    if (this._lastBypassValue === value) {\r\n                        return;\r\n                    }\r\n                    this._bypass = value;\r\n                    this.activate(!value);\r\n                    this._lastBypassValue = value;\r\n                }\r\n            },\r\n            connect: {\r\n                value: function(target) {\r\n                    this.output.connect(target);\r\n                }\r\n            },\r\n            disconnect: {\r\n                value: function(target) {\r\n                    this.output.disconnect(target);\r\n                }\r\n            },\r\n            connectInOrder: {\r\n                value: function(nodeArray) {\r\n                    var i = nodeArray.length - 1;\r\n                    while (i--) {\r\n                        if (!nodeArray[i].connect) {\r\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\r\n                        }\r\n                        if (nodeArray[i + 1].input) {\r\n                            nodeArray[i].connect(nodeArray[i + 1].input);\r\n                        } else {\r\n                            nodeArray[i].connect(nodeArray[i + 1]);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            getDefaults: {\r\n                value: function() {\r\n                    var result = {};\r\n                    for (var key in this.defaults) {\r\n                        result[key] = this.defaults[key].value;\r\n                    }\r\n                    return result;\r\n                }\r\n            },\r\n            automate: {\r\n                value: function(property, value, duration, startTime) {\r\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\r\n                        dur = duration ? ~~(duration / 1000) : 0,\r\n                        _is = this.defaults[property],\r\n                        param = this[property],\r\n                        method;\r\n\r\n                    if (param) {\r\n                        if (_is.automatable) {\r\n                            if (!duration) {\r\n                                method = \"setValueAtTime\";\r\n                            } else {\r\n                                method = \"linearRampToValueAtTime\";\r\n                                param.cancelScheduledValues(start);\r\n                                param.setValueAtTime(param.value, start);\r\n                            }\r\n                            param[method](value, dur + start);\r\n                        } else {\r\n                            param = value;\r\n                        }\r\n                    } else {\r\n                        console.error(\"Invalid Property for \" + this.name);\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n        FLOAT = \"float\",\r\n        BOOLEAN = \"boolean\",\r\n        STRING = \"string\",\r\n        INT = \"int\";\r\n\r\n    if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = Tuna;\r\n    } else if (typeof define === \"function\") {\r\n        window.define(\"Tuna\", definition);\r\n    } else {\r\n        window.Tuna = Tuna;\r\n    }\r\n\r\n    function definition() {\r\n        return Tuna;\r\n    }\r\n\r\n    function Tuna(context) {\r\n        if (!(this instanceof Tuna)) {\r\n            return new Tuna(context);\r\n        }\r\n\r\n        var _window = typeof window === \"undefined\" ? {} : window;\r\n\r\n        if (!_window.AudioContext) {\r\n            _window.AudioContext = _window.webkitAudioContext;\r\n        }\r\n        if (!context) {\r\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\r\n            context = _window.AudioContext && (new _window.AudioContext());\r\n        }\r\n        if (!context) {\r\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\r\n        }\r\n        connectify(context);\r\n        userContext = context;\r\n        userInstance = this;\r\n    }\r\n\r\n    function connectify(context) {\r\n        if (context.__connectified__ === true) return;\r\n\r\n        var gain = context.createGain(),\r\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\r\n            oconnect = proto.connect;\r\n\r\n        proto.connect = shimConnect;\r\n        context.__connectified__ = true; // Prevent overriding connect more than once\r\n\r\n        function shimConnect() {\r\n            var node = arguments[0];\r\n            arguments[0] = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\r\n            oconnect.apply(this, arguments);\r\n            return node;\r\n        }\r\n    }\r\n\r\n    function dbToWAVolume(db) {\r\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\r\n    }\r\n\r\n    function fmod(x, y) {\r\n        // http://kevin.vanzonneveld.net\r\n        // *     example 1: fmod(5.7, 1.3);\r\n        // *     returns 1: 0.5\r\n        var tmp, tmp2, p = 0,\r\n            pY = 0,\r\n            l = 0.0,\r\n            l2 = 0.0;\r\n\r\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n\r\n        if (pY > p) {\r\n            p = pY;\r\n        }\r\n\r\n        tmp2 = (x % y);\r\n\r\n        if (p < -100 || p > 20) {\r\n            // toFixed will give an out of bound error so we fix it like this:\r\n            l = Math.round(Math.log(tmp2) / Math.log(10));\r\n            l2 = Math.pow(10, l);\r\n\r\n            return (tmp2 / l2).toFixed(l - p) * l2;\r\n        } else {\r\n            return parseFloat(tmp2.toFixed(-p));\r\n        }\r\n    }\r\n\r\n    function sign(x) {\r\n        if (x === 0) {\r\n            return 1;\r\n        } else {\r\n            return Math.abs(x) / x;\r\n        }\r\n    }\r\n\r\n    function tanh(n) {\r\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\r\n    }\r\n\r\n    function initValue(userVal, defaultVal) {\r\n        return userVal === undefined ? defaultVal : userVal;\r\n    }\r\n\r\n    Tuna.prototype.Bitcrusher = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var phaser = 0,\r\n            last = 0,\r\n            input, output, step, i, length;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0),\r\n            output = e.outputBuffer.getChannelData(0),\r\n            step = Math.pow(1 / 2, this.bits);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                phaser += this.normfreq;\r\n                if (phaser >= 1.0) {\r\n                    phaser -= 1.0;\r\n                    last = step * Math.floor(input[i] / step + 0.5);\r\n                }\r\n                output[i] = last;\r\n            }\r\n        };\r\n\r\n        this.bits = properties.bits || this.defaults.bits.value;\r\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Bitcrusher\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bits: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 16,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                normfreq: {\r\n                    value: 0.1,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        bits: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.bits;\r\n            },\r\n            set: function(value) {\r\n                this.processor.bits = value;\r\n            }\r\n        },\r\n        normfreq: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.normfreq;\r\n            },\r\n            set: function(value) {\r\n                this.processor.normfreq = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Cabinet = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = this.newConvolver(properties.impulsePath || \"../impulses/impulse_guitar.wav\");\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.convolver.input);\r\n        this.convolver.output.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n        //don't use makeupGain setter at init to avoid smoothing\r\n        this.makeupNode.gain.value = initValue(properties.makeupGain, this.defaults.makeupGain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Cabinet\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        newConvolver: {\r\n            value: function(impulsePath) {\r\n                return new userInstance.Convolver({\r\n                    impulse: impulsePath,\r\n                    dryLevel: 0,\r\n                    wetLevel: 1\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Chorus = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.attenuator = this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.delayL = userContext.createDelay();\r\n        this.delayR = userContext.createDelay();\r\n        this.feedbackGainNodeLR = userContext.createGain();\r\n        this.feedbackGainNodeRL = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.delayL.delayTime,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.delayR.delayTime,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.attenuator);\r\n        this.attenuator.connect(this.output);\r\n        this.attenuator.connect(this.splitter);\r\n        this.splitter.connect(this.delayL, 0);\r\n        this.splitter.connect(this.delayR, 1);\r\n        this.delayL.connect(this.feedbackGainNodeLR);\r\n        this.delayR.connect(this.feedbackGainNodeRL);\r\n        this.feedbackGainNodeLR.connect(this.delayR);\r\n        this.feedbackGainNodeRL.connect(this.delayL);\r\n        this.delayL.connect(this.merger, 0, 0);\r\n        this.delayR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.lfoR.phase = Math.PI / 2;\r\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Chorus\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                feedback: {\r\n                    value: 0.4,\r\n                    min: 0,\r\n                    max: 0.95,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                delay: {\r\n                    value: 0.0045,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 1.5,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delay: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delay;\r\n            },\r\n            set: function(value) {\r\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\r\n                this.lfoL.offset = this._delay;\r\n                this.lfoR.offset = this._delay;\r\n                this._depth = this._depth;\r\n            }\r\n        },\r\n        depth: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._depth * this._delay;\r\n                this.lfoR.oscillation = this._depth * this._delay;\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeLR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n                this.feedbackGainNodeRL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Compressor = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.compNode.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n\r\n        this.automakeup = initValue(properties.automakeup, this.defaults.automakeup.value);\r\n\r\n        //don't use makeupGain setter at initialization to avoid smoothing\r\n        if (this.automakeup) {\r\n            this.makeupNode.gain.value = dbToWAVolume(this.computeMakeup());\r\n        } else {\r\n            this.makeupNode.gain.value = dbToWAVolume(initValue(properties.makeupGain, this.defaults.makeupGain.value));\r\n        }\r\n        this.threshold = initValue(properties.threshold, this.defaults.threshold.value);\r\n        this.release = initValue(properties.release, this.defaults.release.value);\r\n        this.attack = initValue(properties.attack, this.defaults.attack.value);\r\n        this.ratio = properties.ratio || this.defaults.ratio.value;\r\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Compressor\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                threshold: {\r\n                    value: -20,\r\n                    min: -60,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                release: {\r\n                    value: 250,\r\n                    min: 10,\r\n                    max: 2000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                attack: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                ratio: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 50,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                knee: {\r\n                    value: 5,\r\n                    min: 0,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                automakeup: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        computeMakeup: {\r\n            value: function() {\r\n                var magicCoefficient = 4, // raise me if the output is too hot\r\n                    c = this.compNode;\r\n                return -(c.threshold.value - c.threshold.value / c.ratio.value) / magicCoefficient;\r\n            }\r\n        },\r\n        automakeup: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._automakeup;\r\n            },\r\n            set: function(value) {\r\n                this._automakeup = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        threshold: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.threshold;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.threshold.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        ratio: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.ratio;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.ratio.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        knee: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.knee;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.knee.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        attack: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.attack;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.attack.value = value / 1000;\r\n            }\r\n        },\r\n        release: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.release;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.release.value = value / 1000;\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.setTargetAtTime(dbToWAVolume(value), userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Convolver = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = userContext.createConvolver();\r\n        this.dry = userContext.createGain();\r\n        this.filterLow = userContext.createBiquadFilter();\r\n        this.filterHigh = userContext.createBiquadFilter();\r\n        this.wet = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filterLow);\r\n        this.activateNode.connect(this.dry);\r\n        this.filterLow.connect(this.filterHigh);\r\n        this.filterHigh.connect(this.convolver);\r\n        this.convolver.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        //don't use setters at init to avoid smoothing\r\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.filterHigh.frequency.value = properties.highCut || this.defaults.highCut.value;\r\n        this.filterLow.frequency.value = properties.lowCut || this.defaults.lowCut.value;\r\n        this.output.gain.value = initValue(properties.level, this.defaults.level.value);\r\n        this.filterHigh.type = \"lowpass\";\r\n        this.filterLow.type = \"highpass\";\r\n        this.buffer = properties.impulse || \"../impulses/ir_rev_short.wav\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Convolver\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                highCut: {\r\n                    value: 22050,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                lowCut: {\r\n                    value: 20,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                level: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        lowCut: {\r\n            get: function() {\r\n                return this.filterLow.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterLow.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        highCut: {\r\n            get: function() {\r\n                return this.filterHigh.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterHigh.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        level: {\r\n            get: function() {\r\n                return this.output.gain;\r\n            },\r\n            set: function(value) {\r\n                this.output.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        dryLevel: {\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        wetLevel: {\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        buffer: {\r\n            enumerable: false,\r\n            get: function() {\r\n                return this.convolver.buffer;\r\n            },\r\n            set: function(impulse) {\r\n                var convolver = this.convolver,\r\n                    xhr = new XMLHttpRequest();\r\n                if (!impulse) {\r\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\r\n                    return;\r\n                }\r\n                xhr.open(\"GET\", impulse, true);\r\n                xhr.responseType = \"arraybuffer\";\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\r\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\r\n                                convolver.buffer = buffer;\r\n                            }, function(e) {\r\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                xhr.send(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Delay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.dry = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.delay = userContext.createDelay(10);\r\n        this.feedbackNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.delay);\r\n        this.activateNode.connect(this.dry);\r\n        this.delay.connect(this.filter);\r\n        this.filter.connect(this.feedbackNode);\r\n        this.feedbackNode.connect(this.delay);\r\n        this.feedbackNode.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\r\n        //don't use setters at init to avoid smoothing\r\n        this.feedbackNode.gain.value = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.filter.frequency.value = properties.cutoff || this.defaults.cutoff.value;\r\n        this.filter.type = \"lowpass\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Delay\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTime: {\r\n                    value: 100,\r\n                    min: 20,\r\n                    max: 1000,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.45,\r\n                    min: 0,\r\n                    max: 0.9,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                cutoff: {\r\n                    value: 20000,\r\n                    min: 20,\r\n                    max: 20000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delayTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.delay.delayTime;\r\n            },\r\n            set: function(value) {\r\n                this.delay.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        dryLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.feedbackNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.feedbackNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Filter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filter);\r\n        this.filter.connect(this.output);\r\n\r\n        //don't use setters for freq and gain at init to avoid smoothing\r\n        this.filter.frequency.value = properties.frequency || this.defaults.frequency.value;\r\n        this.Q = properties.resonance || this.defaults.Q.value;\r\n        this.filterType = initValue(properties.filterType, this.defaults.filterType.value);\r\n        this.filter.gain.value = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Filter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                frequency: {\r\n                    value: 800,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                Q: {\r\n                    value: 1,\r\n                    min: 0.001,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                gain: {\r\n                    value: 0,\r\n                    min: -40,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                filterType: {\r\n                    value: \"lowpass\",\r\n                    automatable: false,\r\n                    type: STRING\r\n                }\r\n            }\r\n        },\r\n        filterType: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.type;\r\n            },\r\n            set: function(value) {\r\n                this.filter.type = value;\r\n            }\r\n        },\r\n        Q: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.Q;\r\n            },\r\n            set: function(value) {\r\n                this.filter.Q.value = value;\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.gain;\r\n            },\r\n            set: function(value) {\r\n                this.filter.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        frequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Gain = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.gainNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.gainNode);\r\n        this.gainNode.connect(this.output);\r\n\r\n        //don't use setter at init to avoid smoothing\r\n        this.gainNode.gain.value = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Gain.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Gain\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                gain: {\r\n                    value: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.gainNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.gainNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.MoogFilter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var in1, in2, in3, in4, out1, out2, out3, out4;\r\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\r\n        var input, output, f, fb, i, length, inputFactor;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0);\r\n            output = e.outputBuffer.getChannelData(0);\r\n            f = this.cutoff * 1.16;\r\n            inputFactor = 0.35013 * (f * f) * (f * f);\r\n            fb = this.resonance * (1.0 - 0.15 * f * f);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                input[i] -= out4 * fb;\r\n                input[i] *= inputFactor;\r\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\r\n                in1 = input[i];\r\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\r\n                in2 = out1;\r\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\r\n                in3 = out2;\r\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\r\n                in4 = out3;\r\n                output[i] = out4;\r\n            }\r\n        };\r\n\r\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff.value);\r\n        this.resonance = initValue(properties.resonance, this.defaults.resonance.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"MoogFilter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                cutoff: {\r\n                    value: 0.065,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 3.5,\r\n                    min: 0.0,\r\n                    max: 4.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.cutoff;\r\n            },\r\n            set: function(value) {\r\n                this.processor.cutoff = value;\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.resonance;\r\n            },\r\n            set: function(value) {\r\n                this.processor.resonance = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Overdrive = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.inputDrive = userContext.createGain();\r\n        this.waveshaper = userContext.createWaveShaper();\r\n        this.outputDrive = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.inputDrive);\r\n        this.inputDrive.connect(this.waveshaper);\r\n        this.waveshaper.connect(this.outputDrive);\r\n        this.outputDrive.connect(this.output);\r\n\r\n        this.ws_table = new Float32Array(this.k_nSamples);\r\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\r\n        this.outputGain = initValue(properties.outputGain, this.defaults.outputGain.value);\r\n        this.curveAmount = initValue(properties.curveAmount, this.defaults.curveAmount.value);\r\n        this.algorithmIndex = initValue(properties.algorithmIndex, this.defaults.algorithmIndex.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Overdrive\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                drive: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                outputGain: {\r\n                    value: 0,\r\n                    min: -46,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                curveAmount: {\r\n                    value: 0.725,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                algorithmIndex: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 5,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        k_nSamples: {\r\n            value: 8192\r\n        },\r\n        drive: {\r\n            get: function() {\r\n                return this.inputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._drive = value;\r\n            }\r\n        },\r\n        curveAmount: {\r\n            get: function() {\r\n                return this._curveAmount;\r\n            },\r\n            set: function(value) {\r\n                this._curveAmount = value;\r\n                if (this._algorithmIndex === undefined) {\r\n                    this._algorithmIndex = 0;\r\n                }\r\n                this.waveshaperAlgorithms[this._algorithmIndex](this._curveAmount, this.k_nSamples, this.ws_table);\r\n                this.waveshaper.curve = this.ws_table;\r\n            }\r\n        },\r\n        outputGain: {\r\n            get: function() {\r\n                return this.outputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._outputGain = dbToWAVolume(value);\r\n                this.outputDrive.gain.setValueAtTime(this._outputGain, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        algorithmIndex: {\r\n            get: function() {\r\n                return this._algorithmIndex;\r\n            },\r\n            set: function(value) {\r\n                this._algorithmIndex = value;\r\n                this.curveAmount = this._curveAmount;\r\n            }\r\n        },\r\n        waveshaperAlgorithms: {\r\n            value: [\r\n                function(amount, n_samples, ws_table) {\r\n                    amount = Math.min(amount, 0.9999);\r\n                    var k = 2 * amount / (1 - amount),\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\r\n                        ws_table[i] = tanh(y);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, a = 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\r\n                        ws_table[i] = tanh(y * 2);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        abx = Math.abs(x);\r\n                        if (abx < a) y = abx;\r\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\r\n                        else if (abx > 1) y = abx;\r\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\r\n                    var i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        if (x < -0.08905) {\r\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) - 0.032847)) + 0.01;\r\n                        } else if (x >= -0.08905 && x < 0.320018) {\r\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\r\n                        } else {\r\n                            ws_table[i] = 0.630035;\r\n                        }\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var a = 2 + Math.round(amount * 14),\r\n                        // we go from 2 to 16 bits, keep in mind for the UI\r\n                        bits = Math.round(Math.pow(2, a - 1)),\r\n                        // real number of quantization steps divided by 2\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = Math.round(x * bits) / bits;\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Panner = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.panner = userContext.createStereoPanner();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.panner);\r\n        this.panner.connect(this.output);\r\n\r\n        this.pan = initValue(properties.pan, this.defaults.pan.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Panner.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Panner\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                pan: {\r\n                    value: 0.0,\r\n                    min: -1.0,\r\n                    max: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        pan: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.panner.pan;\r\n            },\r\n            set: function(value) {\r\n                this.panner.pan.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Phaser = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.filtersL = [];\r\n        this.filtersR = [];\r\n        this.feedbackGainNodeL = userContext.createGain();\r\n        this.feedbackGainNodeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.filteredSignal = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.filtersL,\r\n            callback: this.callback\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.filtersR,\r\n            callback: this.callback\r\n        });\r\n\r\n        var i = this.stage;\r\n        while (i--) {\r\n            this.filtersL[i] = userContext.createBiquadFilter();\r\n            this.filtersR[i] = userContext.createBiquadFilter();\r\n            this.filtersL[i].type = \"allpass\";\r\n            this.filtersR[i].type = \"allpass\";\r\n        }\r\n        this.input.connect(this.splitter);\r\n        this.input.connect(this.output);\r\n        this.splitter.connect(this.filtersL[0], 0, 0);\r\n        this.splitter.connect(this.filtersR[0], 1, 0);\r\n        this.connectInOrder(this.filtersL);\r\n        this.connectInOrder(this.filtersR);\r\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\r\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\r\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\r\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\r\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\r\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Phaser\"\r\n        },\r\n        stage: {\r\n            value: 4\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                rate: {\r\n                    value: 0.1,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.6,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 40,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                baseModulationFrequency: {\r\n                    value: 700,\r\n                    min: 500,\r\n                    max: 1500,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(filters, value) {\r\n                for (var stage = 0; stage < 4; stage++) {\r\n                    filters[stage].frequency.value = value;\r\n                }\r\n            }\r\n        },\r\n        depth: {\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\r\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\r\n            }\r\n        },\r\n        rate: {\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        baseModulationFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseModulationFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseModulationFrequency = value;\r\n                this.lfoL.offset = this._baseModulationFrequency;\r\n                this.lfoR.offset = this._baseModulationFrequency;\r\n                this.depth = this._depth;\r\n            }\r\n        },\r\n        feedback: {\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n                this.feedbackGainNodeR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR._phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.PingPongDelay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.stereoToMonoMix = userContext.createGain();\r\n        this.feedbackLevel = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.delayLeft = userContext.createDelay(10);\r\n        this.delayRight = userContext.createDelay(10);\r\n\r\n        this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.merger = userContext.createChannelMerger(2);\r\n\r\n        this.activateNode.connect(this.splitter);\r\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\r\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\r\n        this.stereoToMonoMix.gain.value = .5;\r\n        this.stereoToMonoMix.connect(this.wet);\r\n        this.wet.connect(this.delayLeft);\r\n        this.feedbackLevel.connect(this.wet);\r\n        this.delayLeft.connect(this.delayRight);\r\n        this.delayRight.connect(this.feedbackLevel);\r\n        this.delayLeft.connect(this.merger, 0, 0);\r\n        this.delayRight.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n        this.activateNode.connect(this.output);\r\n\r\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\r\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\r\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\r\n        this.wet.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"PingPongDelay\"\r\n        },\r\n        delayTimeLeft: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeLeft;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeLeft = value;\r\n                this.delayLeft.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        delayTimeRight: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeRight;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeRight = value;\r\n                this.delayRight.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.wet.gain;\r\n            },\r\n            set: function (value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }, \r\n        feedback: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.feedbackLevel.gain;\r\n            },\r\n            set: function (value) {\r\n                this.feedbackLevel.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTimeLeft: {\r\n                    value: 200,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                delayTimeRight: {\r\n                    value: 400,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                feedback: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Tremolo = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.amplitudeL = userContext.createGain();\r\n        this.amplitudeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.amplitudeL.gain,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.amplitudeR.gain,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.splitter);\r\n        this.splitter.connect(this.amplitudeL, 0);\r\n        this.splitter.connect(this.amplitudeR, 1);\r\n        this.amplitudeL.connect(this.merger, 0, 0);\r\n        this.amplitudeR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = properties.rate || this.defaults.rate.value;\r\n        this.intensity = initValue(properties.intensity, this.defaults.intensity.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.offset = 1 - (this.intensity / 2);\r\n        this.lfoR.offset = 1 - (this.intensity / 2);\r\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Tremolo\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                intensity: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 5,\r\n                    min: 0.1,\r\n                    max: 11,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        intensity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._intensity;\r\n            },\r\n            set: function(value) {\r\n                this._intensity = value;\r\n                this.lfoL.offset = 1 - this._intensity / 2;\r\n                this.lfoR.offset = 1 - this._intensity / 2;\r\n                this.lfoL.oscillation = this._intensity;\r\n                this.lfoR.oscillation = this._intensity;\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR.phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.WahWah = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\r\n            target: this,\r\n            callback: function(context, value) {\r\n                context.sweep = value;\r\n            }\r\n        });\r\n        this.filterBp = userContext.createBiquadFilter();\r\n        this.filterPeaking = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        //Connect AudioNodes\r\n        this.activateNode.connect(this.filterBp);\r\n        this.filterBp.connect(this.filterPeaking);\r\n        this.filterPeaking.connect(this.output);\r\n\r\n        //Set Properties\r\n        this.init();\r\n        this.automode = initValue(properties.automode, this.defaults.automode.value);\r\n        this.resonance = properties.resonance || this.defaults.resonance.value;\r\n        this.sensitivity = initValue(properties.sensitivity, this.defaults.sensitivity.value);\r\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults.baseFrequency.value);\r\n        this.excursionOctaves = properties.excursionOctaves || this.defaults.excursionOctaves.value;\r\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\r\n\r\n        this.activateNode.gain.value = 2;\r\n        this.envelopeFollower.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"WahWah\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                automode: {\r\n                    value: true,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                baseFrequency: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                excursionOctaves: {\r\n                    value: 2,\r\n                    min: 1,\r\n                    max: 6,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sweep: {\r\n                    value: 0.2,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 10,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sensitivity: {\r\n                    value: 0.5,\r\n                    min: -1,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        automode: {\r\n            get: function() {\r\n                return this._automode;\r\n            },\r\n            set: function(value) {\r\n                this._automode = value;\r\n                if (value) {\r\n                    this.activateNode.connect(this.envelopeFollower.input);\r\n                    this.envelopeFollower.activate(true);\r\n                } else {\r\n                    this.envelopeFollower.activate(false);\r\n                    this.activateNode.disconnect();\r\n                    this.activateNode.connect(this.filterBp);\r\n                }\r\n            }\r\n        },\r\n        filterFreqTimeout: {\r\n            value: 0\r\n        },\r\n        setFilterFreq: {\r\n            value: function() {\r\n                try {\r\n                    this.filterBp.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                    this.filterPeaking.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                } catch (e) {\r\n                    clearTimeout(this.filterFreqTimeout);\r\n                    //put on the next cycle to let all init properties be set\r\n                    this.filterFreqTimeout = setTimeout(function() {\r\n                        this.setFilterFreq();\r\n                    }.bind(this), 0);\r\n                }\r\n            }\r\n        },\r\n        sweep: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sweep;\r\n            },\r\n            set: function(value) {\r\n                this._sweep = Math.pow(value > 1 ? 1 : value < 0 ? 0 : value, this._sensitivity);\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        baseFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseFrequency = 50 * Math.pow(10, value * 2);\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        excursionOctaves: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._excursionOctaves;\r\n            },\r\n            set: function(value) {\r\n                this._excursionOctaves = value;\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        sensitivity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sensitivity;\r\n            },\r\n            set: function(value) {\r\n                this._sensitivity = Math.pow(10, value);\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._resonance;\r\n            },\r\n            set: function(value) {\r\n                this._resonance = value;\r\n                this.filterPeaking.Q = this._resonance;\r\n            }\r\n        },\r\n        init: {\r\n            value: function() {\r\n                this.output.gain.value = 1;\r\n                this.filterPeaking.type = \"peaking\";\r\n                this.filterBp.type = \"bandpass\";\r\n                this.filterPeaking.frequency.value = 100;\r\n                this.filterPeaking.gain.value = 20;\r\n                this.filterPeaking.Q.value = 5;\r\n                this.filterBp.frequency.value = 100;\r\n                this.filterBp.Q.value = 1;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.EnvelopeFollower = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.jsNode = this.output = userContext.createScriptProcessor(this.buffersize, 1, 1);\r\n\r\n        this.input.connect(this.output);\r\n\r\n        this.attackTime = initValue(properties.attackTime, this.defaults.attackTime.value);\r\n        this.releaseTime = initValue(properties.releaseTime, this.defaults.releaseTime.value);\r\n        this._envelope = 0;\r\n        this.target = properties.target || {};\r\n        this.callback = properties.callback || function() {};\r\n\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"EnvelopeFollower\"\r\n        },\r\n        defaults: {\r\n            value: {\r\n                attackTime: {\r\n                    value: 0.003,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                releaseTime: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        buffersize: {\r\n            value: 256\r\n        },\r\n        envelope: {\r\n            value: 0\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        attackTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._attackTime;\r\n            },\r\n            set: function(value) {\r\n                this._attackTime = value;\r\n                this._attackC = Math.exp(-1 / this._attackTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        releaseTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._releaseTime;\r\n            },\r\n            set: function(value) {\r\n                this._releaseTime = value;\r\n                this._releaseC = Math.exp(-1 / this._releaseTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        callback: {\r\n            get: function() {\r\n                return this._callback;\r\n            },\r\n            set: function(value) {\r\n                if (typeof value === \"function\") {\r\n                    this._callback = value;\r\n                } else {\r\n                    console.error(\"tuna.js: \" + this.name + \": Callback must be a function!\");\r\n                }\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                this.activated = doActivate;\r\n                if (doActivate) {\r\n                    this.jsNode.connect(userContext.destination);\r\n                    this.jsNode.onaudioprocess = this.returnCompute(this);\r\n                } else {\r\n                    this.jsNode.disconnect();\r\n                    this.jsNode.onaudioprocess = null;\r\n                }\r\n                if (this.activateCallback) {\r\n                    this.activateCallback(doActivate);\r\n                }\r\n            }\r\n        },\r\n        returnCompute: {\r\n            value: function(instance) {\r\n                return function(event) {\r\n                    instance.compute(event);\r\n                };\r\n            }\r\n        },\r\n        compute: {\r\n            value: function(event) {\r\n                var count = event.inputBuffer.getChannelData(0).length,\r\n                    channels = event.inputBuffer.numberOfChannels,\r\n                    current, chan, rms, i;\r\n                chan = rms = i = 0;\r\n                if (channels > 1) { //need to mixdown\r\n                    for (i = 0; i < count; ++i) {\r\n                        for (; chan < channels; ++chan) {\r\n                            current = event.inputBuffer.getChannelData(chan)[i];\r\n                            rms += (current * current) / channels;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i = 0; i < count; ++i) {\r\n                        current = event.inputBuffer.getChannelData(0)[i];\r\n                        rms += (current * current);\r\n                    }\r\n                }\r\n                rms = Math.sqrt(rms);\r\n\r\n                if (this._envelope < rms) {\r\n                    this._envelope *= this._attackC;\r\n                    this._envelope += (1 - this._attackC) * rms;\r\n                } else {\r\n                    this._envelope *= this._releaseC;\r\n                    this._envelope += (1 - this._releaseC) * rms;\r\n                }\r\n                this._callback(this._target, this._envelope);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.LFO = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        //Instantiate AudioNode\r\n        this.input = userContext.createGain();\r\n        this.output = userContext.createScriptProcessor(256, 1, 1);\r\n        this.activateNode = userContext.destination;\r\n\r\n        //Set Properties\r\n        this.frequency = initValue(properties.frequency, this.defaults.frequency.value);\r\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\r\n        this.oscillation = initValue(properties.oscillation, this.defaults.oscillation.value);\r\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\r\n        this.target = properties.target || {};\r\n        this.output.onaudioprocess = this.callback(properties.callback || function() {});\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"LFO\"\r\n        },\r\n        bufferSize: {\r\n            value: 256\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        defaults: {\r\n            value: {\r\n                frequency: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                offset: {\r\n                    value: 0.85,\r\n                    min: 0,\r\n                    max: 22049,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                oscillation: {\r\n                    value: 0.3,\r\n                    min: -22050,\r\n                    max: 22050,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                phase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 2 * Math.PI,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        frequency: {\r\n            get: function() {\r\n                return this._frequency;\r\n            },\r\n            set: function(value) {\r\n                this._frequency = value;\r\n                this._phaseInc = 2 * Math.PI * this._frequency * this.bufferSize / this.sampleRate;\r\n            }\r\n        },\r\n        offset: {\r\n            get: function() {\r\n                return this._offset;\r\n            },\r\n            set: function(value) {\r\n                this._offset = value;\r\n            }\r\n        },\r\n        oscillation: {\r\n            get: function() {\r\n                return this._oscillation;\r\n            },\r\n            set: function(value) {\r\n                this._oscillation = value;\r\n            }\r\n        },\r\n        phase: {\r\n            get: function() {\r\n                return this._phase;\r\n            },\r\n            set: function(value) {\r\n                this._phase = value;\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                if (doActivate) {\r\n                    this.output.connect(userContext.destination);\r\n                    if (this.activateCallback) {\r\n                        this.activateCallback(doActivate);\r\n                    }\r\n                } else {\r\n                    this.output.disconnect();\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(callback) {\r\n                var that = this;\r\n                return function() {\r\n                    that._phase += that._phaseInc;\r\n                    if (that._phase > 2 * Math.PI) {\r\n                        that._phase = 0;\r\n                    }\r\n                    callback(that._target, that._offset + that._oscillation * Math.sin(that._phase));\r\n                };\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.toString = Tuna.prototype.toString = function() {\r\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\r\n    };\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}