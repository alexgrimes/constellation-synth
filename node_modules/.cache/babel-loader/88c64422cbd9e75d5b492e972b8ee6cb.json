{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\n\nclass EffectsBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      context: [],\n      isStarted: false\n    };\n  }\n\n  componentWillMount() {\n    var contextClass = window.AudioContext || window.webkitAudioContext;\n\n    if (contextClass) {\n      // Web Audio API is available.\n      this.state.context = new contextClass();\n    } else {\n      alert('Web Audio API is not supported in this browser.');\n    }\n  }\n\n  turnOnFilter() {\n    if (this.props.isFilterOn) {\n      if (!this.state.isStarted) {\n        console.log(this.state.context);\n        this.filter = this.state.context.createBiquadFilter();\n        this.distortion = this.state.context.createWaveShaper();\n        this.gainNode = this.state.context.createGain();\n        this.convolver = this.state.context.createConvolver; // this.filter.type = filter.LOWPASS;\n        // this.filter.frequency.value;\n\n        let convolverGain = this.state.context.createGain();\n        let distortionGain = this.state.context.createGain();\n        let filterGain = this.state.context.createGain();\n        let masterGain = this.state.context.createGain();\n        this.distortion.connect(distortionGain);\n        distortionGain.connect(this.convolver);\n        this.convolver.connect(convolverGain);\n        convolverGain.connect(this.filter);\n        this.filter.connect(filterGain);\n        filterGain.connect(masterGain);\n        masterGain.gain.value = this.props.masterGainValue;\n        masterGain.connect(this.state.context.destination);\n        this.filter.start(0);\n        this.state.isStarted = true;\n      }\n    } else {\n      if (typeof this.filter !== \"undefined\") {\n        if (this.state.isStarted) {\n          this.filter.stop(0);\n          this.state.isStarted = false;\n        }\n      }\n    }\n  }\n\n  filterTypeChanged(typeName) {\n    console.log(this.state.isStarted);\n\n    if (typeof this.filter !== \"undefined\") {\n      this.filter.type = typeName;\n    }\n  }\n\n  filterFrequencyChanged(value) {\n    console.log(value, this.state.context.currentTime, this.filter);\n\n    if (typeof this.filter !== \"undefined\") {\n      this.filter.frequency.setValueAtTime(value, this.state.context.currentTime);\n    }\n  }\n\n  filterGainChanged(value) {\n    console.log(value, this.state.context.currentTime, this.filter);\n\n    if (typeof this.filter !== \"undefined\") {\n      this.filter.gain.setValueAtTime(value, this.state.context.currentTime);\n    }\n  }\n\n  render() {\n    console.log(this.state.context);\n\n    if (typeof this.filter !== \"undefined\") {\n      this.filter.onended = function () {\n        console.log(\"hey\");\n      };\n    }\n\n    console.log(this.props.filter2Freq, this.filter);\n    this.turnOnFilter(this.props.isFilterOn);\n    this.filterTypeChanged(this.props.filterType);\n    this.filterFrequencyChanged(this.props.filterFreq);\n    return null;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isfilterOn: state.isfilterOn,\n    filterFreq: state.filterFreq,\n    filterType: state.filterType,\n    masterGainValue: state.masterGainValue\n  };\n}\n\nexport default connect(mapStateToProps)(EffectsBoard);","map":{"version":3,"sources":["/Users/Nanis/Flatiron/code/mod5/synth-builder/synth-builder/src/components/EffectsBoard.js"],"names":["React","connect","EffectsBoard","Component","constructor","props","state","context","isStarted","componentWillMount","contextClass","window","AudioContext","webkitAudioContext","alert","turnOnFilter","isFilterOn","console","log","filter","createBiquadFilter","distortion","createWaveShaper","gainNode","createGain","convolver","createConvolver","convolverGain","distortionGain","filterGain","masterGain","gain","value","masterGainValue","destination","start","stop","filterTypeChanged","typeName","type","filterFrequencyChanged","currentTime","frequency","setValueAtTime","filterGainChanged","render","onended","filter2Freq","filterType","filterFreq","mapStateToProps","isfilterOn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nclass EffectsBoard extends React.Component {\n  constructor(props) {\n  \tsuper(props);\n    this.state = {\n      context: [],\n      isStarted: false,\n    };\n  }\n\n  componentWillMount() {\n\tvar contextClass = (window.AudioContext || window.webkitAudioContext)\n\n\tif (contextClass) \n\t{\n\t  // Web Audio API is available.\n\t  this.state.context = new contextClass();\n\t} \n\telse \n\t{\n\t  alert('Web Audio API is not supported in this browser.')\n\t}\n\n  }\n\n  turnOnFilter() {\n    if (this.props.isFilterOn) {\n      if (!this.state.isStarted) {\n        console.log(this.state.context)\n        this.filter = this.state.context.createBiquadFilter();\n        this.distortion = this.state.context.createWaveShaper();\n        this.gainNode = this.state.context.createGain();\n        this.convolver = this.state.context.createConvolver;\n\n        // this.filter.type = filter.LOWPASS;\n        // this.filter.frequency.value;\n        let convolverGain = this.state.context.createGain();\n        let distortionGain = this.state.context.createGain();\n        let filterGain = this.state.context.createGain();\n        let masterGain = this.state.context.createGain();\n\n        this.distortion.connect(distortionGain)\n        distortionGain.connect(this.convolver)\n        this.convolver.connect(convolverGain)\n        convolverGain.connect(this.filter)\n        this.filter.connect(filterGain);\n        filterGain.connect(masterGain);\n        masterGain.gain.value = this.props.masterGainValue;\n        masterGain.connect(this.state.context.destination);\n        this.filter.start(0);\n        this.state.isStarted = true;\n      }\n    }\n    else {\n      if(typeof this.filter !== \"undefined\") {\n        if (this.state.isStarted) {\n          this.filter.stop(0);\n          this.state.isStarted = false;\n        }\n      }\n    }\n  }\n  filterTypeChanged(typeName) {\n    console.log(this.state.isStarted)\n\tif (typeof this.filter !== \"undefined\") {\n\t  this.filter.type = typeName;\n\t}\n  }\n  filterFrequencyChanged(value) {\n    console.log(value, this.state.context.currentTime, this.filter)\n    if (typeof this.filter !== \"undefined\") {\n\t  this.filter.frequency.setValueAtTime(value, this.state.context.currentTime);\n  }\n  }\n\n  filterGainChanged(value) {\n    console.log(value, this.state.context.currentTime, this.filter)\n    if (typeof this.filter !== \"undefined\") {\n\t  this.filter.gain.setValueAtTime(value, this.state.context.currentTime);\n  }\n  }\n\n  render() {\n    console.log(this.state.context)\n  \tif(typeof this.filter !== \"undefined\") {\n  \t\tthis.filter.onended = function() {\n  \t\t\tconsole.log(\"hey\")\n  \t\t}\n  \t}\n    console.log(this.props.filter2Freq, this.filter)\n    this.turnOnFilter(this.props.isFilterOn);\n    this.filterTypeChanged(this.props.filterType);\n    this.filterFrequencyChanged(this.props.filterFreq);\n\n    return (null)\n  }\n}\n\nfunction mapStateToProps(state){\n  return{\n    isfilterOn: state.isfilterOn,\n    filterFreq: state.filterFreq,\n    filterType: state.filterType,\n    masterGainValue: state.masterGainValue,\n  }\n}\n\nexport default connect(mapStateToProps)(EffectsBoard);\n\n"]},"metadata":{},"sourceType":"module"}