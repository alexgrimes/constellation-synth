{"ast":null,"code":"import store from './store';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Tuna from 'tunajs';\n\nclass SynthEngine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      context: [],\n      isStarted: false\n    };\n  }\n\n  componentWillMount() {\n    var contextClass = window.AudioContext || window.webkitAudioContext;\n\n    if (contextClass) {\n      // Web Audio API is available.\n      this.state.context = new contextClass();\n    } else {\n      alert('Web Audio API is not supported in this browser.');\n    }\n  }\n\n  playSound() {\n    console.log(this.props, this.state, this.state.context.destination);\n\n    if (this.props.isSynthPlaying) {\n      if (!this.state.isStarted) {\n        // tuna context\n        var tuna = new Tuna(this.state.context); // setting effects state\n\n        this.osc = new OscillatorNode(this.state.context);\n        this.chorus = new tuna.Chorus(this.state.context);\n        this.lfo = new OscillatorNode(this.state.context);\n        this.filter = new tuna.Filter(this.state.context);\n        this.tremelo = new tuna.Tremelo(this.state.context);\n        this.bitcrusher = new tuna.Bitcrusher(this.state.context);\n        this.moogFilter = new tuna.MoogFilter(this.state.context);\n        this.reverb = new tuna.Convolver(this.state.context);\n        this.cabinet = new tuna.Cabinet(this.state.context);\n        this.panner = new tuna.Panner(this.state.context);\n        this.phaser = new tuna.Phaser(this.state.context);\n        this.chorus = new tuna.Chorus(this.state.context);\n        this.overdrive = new tuna.Overdrive(this.state.context);\n        this.overdrive = new tuna.Overdrive(this.state.context);\n        this.overdrive = new tuna.Overdrive(this.state.context); //declaring effects vars\n\n        var oscOutput = this.state.context.createGain();\n        var lfoOutput = this.state.context.createGain();\n        var masterGain = this.state.context.createGain(); //connecting\n\n        console.log(this.osc, this.lfo.state);\n        this.lfo.connect(lfoOutput);\n        this.osc.connect(oscOutput);\n        lfoOutput.connect(oscOutput.gain);\n        oscOutput.connect(masterGain);\n        masterGain.gain.value = this.props.masterGainValue;\n        masterGain.connect(this.state.context.destination);\n        this.osc.start(0);\n        this.lfo.start(0);\n        this.state.isStarted = true;\n        console.log(this.state.isStarted, this.state.context, this.osc.frequency);\n      }\n\n      console.log(this.props.masterGainValue);\n    } else {\n      if (typeof this.osc !== \"undefined\") {\n        if (this.state.isStarted) {\n          this.osc.stop(0);\n          this.state.isStarted = false;\n        }\n      }\n    }\n  }\n\n  oscTypeChanged(typeName) {\n    if (typeof this.osc !== \"undefined\") {\n      this.osc.type = typeName;\n    }\n  }\n\n  lfoTypeChanged(typeName) {\n    if (typeof this.osc !== \"undefined\") {\n      this.lfo.type = typeName;\n    }\n  }\n\n  oscFrequencyChanged(value) {\n    console.log(this.osc, value);\n\n    if (typeof this.osc !== \"undefined\") {\n      this.osc.frequency.setValueAtTime(value, this.state.context.currentTime);\n    }\n  }\n\n  lfoFrequencyChanged(value) {\n    if (typeof this.osc !== \"undefined\") {\n      this.lfo.frequency.setValueAtTime(value, this.state.context.currentTime);\n    }\n  }\n\n  render() {\n    if (typeof this.osc !== \"undefined\") {\n      this.osc.onended = function () {\n        console.log(\"hey\");\n      };\n    }\n\n    console.log(this.props.isSynthPlaying, this.state.isStarted);\n    this.playSound(this.props.isSynthPlaying); // this.turnOnLFO(this.props.isLFOOn)\n\n    this.oscTypeChanged(this.props.oscType); // this.lfoTypeChanged(this.props.lfoType);\n\n    this.oscFrequencyChanged(this.props.oscFreq); // this.lfoFrequencyChanged(this.props.lfoFreq);\n\n    return null;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  console.log(state.oscFreq);\n  return {\n    isSynthPlaying: state.isSynthPlaying,\n    // isLFOOn: state.isLFOOn,\n    oscFreq: state.oscFreq,\n    // lfoFreq: state.lfoFreq,\n    masterGainValue: state.masterGainValue,\n    oscType: state.oscType // lfoType: state.lfoType\n\n  };\n}\n\nexport default connect(mapStateToProps)(SynthEngine);","map":{"version":3,"sources":["/Users/Nanis/Flatiron/code/mod5/synth-builder/synth-builder/src/components/SynthEngine.js"],"names":["store","React","connect","Tuna","SynthEngine","Component","constructor","props","state","context","isStarted","componentWillMount","contextClass","window","AudioContext","webkitAudioContext","alert","playSound","console","log","destination","isSynthPlaying","tuna","osc","OscillatorNode","chorus","Chorus","lfo","filter","Filter","tremelo","Tremelo","bitcrusher","Bitcrusher","moogFilter","MoogFilter","reverb","Convolver","cabinet","Cabinet","panner","Panner","phaser","Phaser","overdrive","Overdrive","oscOutput","createGain","lfoOutput","masterGain","gain","value","masterGainValue","start","frequency","stop","oscTypeChanged","typeName","type","lfoTypeChanged","oscFrequencyChanged","setValueAtTime","currentTime","lfoFrequencyChanged","render","onended","oscType","oscFreq","mapStateToProps"],"mappings":"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","sourcesContent":["import store from './store';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Tuna from 'tunajs';\n\nclass SynthEngine extends React.Component {\n  constructor(props) {\n  \tsuper(props);\n    this.state = {\n      context: [],\n      isStarted: false,\n    };\n  }\n\n  componentWillMount() {\n\tvar contextClass = (window.AudioContext || window.webkitAudioContext)\n\n\tif (contextClass) \n\t{\n\t  // Web Audio API is available.\n\t  this.state.context = new contextClass();\n\t} \n\telse \n\t{\n\t  alert('Web Audio API is not supported in this browser.')\n\t}\n\n  }\n\n  playSound() {\n\t\tconsole.log(this.props, this.state, this.state.context.destination)\n  \tif (this.props.isSynthPlaying) {\n\t\tif (!this.state.isStarted){\n\n\t\t// tuna context\n\t\tvar tuna = new Tuna(this.state.context);\n\n\t\t// setting effects state\n\t\tthis.osc = new OscillatorNode(this.state.context);\n\t\tthis.chorus = new tuna.Chorus(this.state.context)\n\t\tthis.lfo = new OscillatorNode(this.state.context);\n\t\tthis.filter = new tuna.Filter(this.state.context);\n\t\tthis.tremelo = new tuna.Tremelo(this.state.context);\n\t\tthis.bitcrusher = new tuna.Bitcrusher(this.state.context);\n\t\tthis.moogFilter = new tuna.MoogFilter(this.state.context);\n\t\tthis.reverb = new tuna.Convolver(this.state.context);\n\t\tthis.cabinet = new tuna.Cabinet(this.state.context);\n\t\tthis.panner = new tuna.Panner(this.state.context);\n\t\tthis.phaser = new tuna.Phaser(this.state.context);\n\t\tthis.chorus = new tuna.Chorus(this.state.context);\n\t\tthis.overdrive = new tuna.Overdrive(this.state.context);\n\t\tthis.overdrive = new tuna.Overdrive(this.state.context);\n\t\tthis.overdrive = new tuna.Overdrive(this.state.context);\n\n\n\t\t//declaring effects vars\n\t\tvar oscOutput = this.state.context.createGain();\n\t\tvar lfoOutput = this.state.context.createGain();\n\t\tvar masterGain = this.state.context.createGain();\n\n\t\t//connecting\n\t\tconsole.log(this.osc, this.lfo.state)\n\t\tthis.lfo.connect(lfoOutput);\n\t\tthis.osc.connect(oscOutput);\n\t\t\n\n\t\tlfoOutput.connect(oscOutput.gain);\n\t\toscOutput.connect(masterGain);\n\n\t\tmasterGain.gain.value = this.props.masterGainValue;\n\n\t\tmasterGain.connect(this.state.context.destination);\n\t\tthis.osc.start(0);\n\t\tthis.lfo.start(0);\n\t\tthis.state.isStarted = true;\n\t\tconsole.log(this.state.isStarted, this.state.context, this.osc.frequency)\n\t    }\n\tconsole.log(this.props.masterGainValue)\n\t}\n\telse {\n\t  \tif(typeof this.osc !== \"undefined\") {\n\t\t  if (this.state.isStarted){\n\t\t  this.osc.stop(0);\n\t\t  this.state.isStarted = false;\n\t\t}\n  \t    }\n  \t}\n  }\n\t\n\n  oscTypeChanged(typeName) {\n\n\tif (typeof this.osc !== \"undefined\") {\n\t  this.osc.type = typeName;\n\t}\n  }\n\n  lfoTypeChanged(typeName) {\n\tif (typeof this.osc !== \"undefined\") {\n\t  this.lfo.type = typeName;\n\t}\n  }\n\n  oscFrequencyChanged(value) {\n\t\tconsole.log(this.osc, value)\n\tif (typeof this.osc !== \"undefined\") {\n\t  this.osc.frequency.setValueAtTime(value, this.state.context.currentTime);\n\t}\n  }\n\n  lfoFrequencyChanged(value) {\n\tif (typeof this.osc !== \"undefined\") {\n\t  this.lfo.frequency.setValueAtTime(value, this.state.context.currentTime);\n\t}\n  }\n\n  render() {\n  \tif(typeof this.osc !== \"undefined\") {\n  \t\tthis.osc.onended = function() {\n  \t\t\tconsole.log(\"hey\")\n  \t\t}\n  \t}\n\t\tconsole.log(this.props.isSynthPlaying, this.state.isStarted)\n  \tthis.playSound(this.props.isSynthPlaying);\n\t\t// this.turnOnLFO(this.props.isLFOOn)\n  \tthis.oscTypeChanged(this.props.oscType);\n  \t// this.lfoTypeChanged(this.props.lfoType);\n  \tthis.oscFrequencyChanged(this.props.oscFreq);\n  \t// this.lfoFrequencyChanged(this.props.lfoFreq);\n\n  \treturn (null)\n  }\n}\n\nfunction mapStateToProps(state){\n\tconsole.log(state.oscFreq)\n  return {\n    isSynthPlaying: state.isSynthPlaying,\n\t\t// isLFOOn: state.isLFOOn,\n    oscFreq: state.oscFreq,\n    // lfoFreq: state.lfoFreq,\n    masterGainValue: state.masterGainValue,\n    oscType: state.oscType,\n    // lfoType: state.lfoType\n  }\n}\n\nexport default connect(mapStateToProps)(SynthEngine);"]},"metadata":{},"sourceType":"module"}